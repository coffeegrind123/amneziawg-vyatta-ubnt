name: Build kernel module and tools

on:
  push:
    branches:
      - "master"
  pull_request:
  workflow_dispatch:

env:
  MODULE_VERSION: "1.0.20241112"
  TOOLS_VERSION: "1.0.20250706"
  PACKAGE_RELEASE: "1"
  FIRMWARE_ER_v1: "v1.10.11"
  FIRMWARE_ER_v2: "v2.0.9"
  FIRMWARE_UGW: "4.4.50"

jobs:
  headers:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    container:
      image: ubuntu:24.04
      env:
        CROSS: ${{ matrix.toolchain }}
      options: --user root

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        toolchain: [mips64-octeon-linux-]
        image: [octeon-kernel]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 2
            toolchain: mipsel-linux-gnu-
            image: mipsel-kernel

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y build-essential curl wget xz-utils ca-certificates jq patch bc cpio
      - name: Setup toolchain and build headers
        run: |
          echo "=== STARTING COMPLETE WORKFLOW ==="
          echo "Device: ${{ matrix.device }}"
          echo "Toolchain: ${{ matrix.toolchain }}"
          echo "CROSS: $CROSS"
          
          # First, install the toolchain
          echo "=== INSTALLING TOOLCHAIN ==="
          if [ "${{ matrix.toolchain }}" = "mips64-octeon-linux-" ]; then
            apt-get install -y gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 binutils-mips64-linux-gnuabi64
            mkdir -p /usr/local/bin
            ln -sf /usr/bin/mips64-linux-gnuabi64-gcc /usr/local/bin/mips64-octeon-linux-gcc
            ln -sf /usr/bin/mips64-linux-gnuabi64-g++ /usr/local/bin/mips64-octeon-linux-g++
            ln -sf /usr/bin/mips64-linux-gnuabi64-ld /usr/local/bin/mips64-octeon-linux-ld
            ln -sf /usr/bin/mips64-linux-gnuabi64-ar /usr/local/bin/mips64-octeon-linux-ar
            ln -sf /usr/bin/mips64-linux-gnuabi64-strip /usr/local/bin/mips64-octeon-linux-strip
            ln -sf /usr/bin/mips64-linux-gnuabi64-objcopy /usr/local/bin/mips64-octeon-linux-objcopy
            ln -sf /usr/bin/mips64-linux-gnuabi64-objdump /usr/local/bin/mips64-octeon-linux-objdump
            ln -sf /usr/bin/mips64-linux-gnuabi64-nm /usr/local/bin/mips64-octeon-linux-nm
            ln -sf /usr/bin/mips64-linux-gnuabi64-ranlib /usr/local/bin/mips64-octeon-linux-ranlib
            export PATH="/usr/local/bin:$PATH"
            echo "Octeon toolchain installed and PATH updated"
          elif [ "${{ matrix.toolchain }}" = "mipsel-linux-gnu-" ]; then
            apt-get install -y gcc-mipsel-linux-gnu g++-mipsel-linux-gnu binutils-mipsel-linux-gnu
            echo "MIPSEL toolchain installed"
          fi
          
          # Verify toolchain works
          echo "=== VERIFYING TOOLCHAIN ==="
          echo "PATH: $PATH"
          which ${CROSS}gcc
          ${CROSS}gcc --version
          
          # Now do the build
          echo "=== BUILDING HEADERS ==="
          mkdir /headers
          curl -o src.tar.bz2 $(jq -r '.["${{ matrix.device }}"]["${{ matrix.version }}"]' ci/ubnt-source.json)
          tar -xf src.tar.bz2 --wildcards 'source/kernel_*' --strip-components 1
          mv kernel_* kernel.tar.gz
          tar -xf kernel.tar.gz --strip-components 1
          
          # Enhanced DTC compilation fix for newer flex/bison versions
          echo "=== APPLYING COMPREHENSIVE DTC FIX ==="
          
          # Set compiler flags for host compilation
          export HOSTCFLAGS="-fcommon"
          export HOSTCXXFLAGS="-fcommon"
          
          # Remove any pre-generated DTC files to force clean regeneration
          echo "Cleaning pre-generated DTC files..."
          rm -f scripts/dtc/dtc-lexer.lex.c scripts/dtc/dtc-parser.tab.c scripts/dtc/dtc-parser.tab.h 2>/dev/null || true
          
          # Patch DTC Makefile to add -fcommon flag
          if [ -f scripts/dtc/Makefile ]; then
            echo "Patching DTC Makefile for yylloc fix..."
            if ! grep -q "fcommon" scripts/dtc/Makefile; then
              # Add -fcommon flags for DTC compilation
              sed -i '/HOSTCFLAGS_DTC.*:=/a # Fix yylloc multiple definition issue\nHOSTCFLAGS_dtc-lexer.lex.o := $(HOSTCFLAGS_DTC) -fcommon\nHOSTCFLAGS_dtc-parser.tab.o := $(HOSTCFLAGS_DTC) -fcommon' scripts/dtc/Makefile
              echo "DTC Makefile patched successfully"
            else
              echo "DTC Makefile already contains fcommon flags"
            fi
          fi
          
          # Create a function to apply post-generation fixes
          apply_dtc_post_fix() {
            if [ -f scripts/dtc/dtc-lexer.lex.c ]; then
              echo "Removing duplicate yylloc declarations from lexer..."
              sed -i '/^YYLTYPE yylloc;/d' scripts/dtc/dtc-lexer.lex.c
            fi
            
            if [ -f scripts/dtc/dtc-parser.tab.c ]; then
              echo "Making yylloc extern in parser..."
              sed -i 's/^YYLTYPE yylloc;/extern YYLTYPE yylloc;/' scripts/dtc/dtc-parser.tab.c
            fi
          }
          
          # Configure the kernel
          echo "=== CONFIGURING KERNEL ==="
          if [ ${{ matrix.version }} -ne 1 ]; then 
            make ARCH=mips ubnt_er_${{ matrix.device }}_defconfig
          fi
          
          # First attempt at prepare - might generate DTC files
          echo "=== PREPARING KERNEL BUILD ==="
          make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="-fcommon" prepare || {
            echo "First prepare failed, applying post-generation DTC fixes..."
            apply_dtc_post_fix
            echo "Retrying prepare after DTC fixes..."
            make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="-fcommon" prepare
          }
          
          # Modules prepare
          echo "=== PREPARING MODULES ==="
          make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="-fcommon" modules_prepare || {
            echo "Modules prepare failed, applying DTC fixes again..."
            apply_dtc_post_fix
            echo "Retrying modules_prepare after DTC fixes..."
            make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="-fcommon" modules_prepare
          }
          
          # Build modules
          echo "=== BUILDING MODULES ==="
          make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="-fcommon" modules || {
            echo "Modules build failed, applying final DTC fixes..."
            apply_dtc_post_fix
            echo "Retrying modules build after DTC fixes..."
            make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="-fcommon" modules
          }
          
          # Copy build artifacts
          cp Module.symvers .config /headers
          make mrproper
          
          # Build output headers
          make -j$(nproc) ARCH=mips O=/headers CROSS_COMPILE=$CROSS HOSTCFLAGS="-fcommon" prepare modules_prepare scripts
          rm -f /headers/source /headers/Makefile 2>/dev/null || true
          
          # Copy necessary files for module compilation
          find . -path './include/*' -prune -o -path './scripts/*' -prune -o -type f \( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) -print | cpio -pdm "/headers"
          cp -a scripts include "/headers"
          find $(find arch -name include -type d -print) -type f | cpio -pdm "/headers"
          tar -cf headers.tar /headers/
          
          echo "=== HEADERS BUILD COMPLETED SUCCESSFULLY ==="
      - name: Store headers
        uses: actions/upload-artifact@v4
        with:
          name: headers-${{ matrix.device }}-${{ matrix.version }}
          path: headers.tar

  module-prepare:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    container:
      image: ubuntu:24.04

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl wget ca-certificates patch
      - name: Download module source
        run: |
          curl -L -o wireguard-linux-compat-$MODULE_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-linux-kernel-module/archive/refs/tags/v$MODULE_VERSION.tar.gz
          tar -xf wireguard-linux-compat-$MODULE_VERSION.tar.gz --one-top-level=module --strip-components=1
          cd module
          sed -i 's/ --dirty//g' src/Makefile
          patch -p1 < ../siphash_no_fallthrough.patch
          
          # Generate version and build files
          cd src
          if [ -f "../scripts/version.sh" ]; then
            ../scripts/version.sh > version.h
          fi
          
          # Create generated directory and files if they don't exist
          mkdir -p generated
          
          # Create a minimal generated/Makefile if it doesn't exist
          if [ ! -f "generated/Makefile" ]; then
            cat > generated/Makefile << 'EOF'
# Generated Makefile for WireGuard module
obj-m += wireguard.o
EOF
          fi
          
          # Check what files we have in the module
          echo "=== Module source structure ==="
          find . -name "Makefile*" -o -name "*.mk" | head -10
          ls -la .
      - name: Upload module source
        uses: actions/upload-artifact@v4
        with:
          name: module-src
          path: module

  module:
    needs: [module-prepare, headers]
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    container:
      image: ubuntu:24.04
      options: --user root

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        toolchain: [mips64-octeon-linux-]
        image: [octeon-kernel]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            toolchain: mipsel-mtk-linux-
            image: mtk-kernel
          - device: e50
            version: 2
            toolchain: mipsel-mtk-linux-
            image: mtk-kernel

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies and setup toolchain
        run: |
          apt-get update
          apt-get install -y build-essential patch bc
          
          # Install and setup cross-compilation toolchain  
          echo "Setting up toolchain: ${{ matrix.toolchain }}"
          
          if [ "${{ matrix.toolchain }}" = "mips64-octeon-linux-" ]; then
            apt-get install -y gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 binutils-mips64-linux-gnuabi64
            mkdir -p /usr/local/bin
            ln -sf /usr/bin/mips64-linux-gnuabi64-gcc /usr/local/bin/mips64-octeon-linux-gcc
            ln -sf /usr/bin/mips64-linux-gnuabi64-g++ /usr/local/bin/mips64-octeon-linux-g++
            ln -sf /usr/bin/mips64-linux-gnuabi64-ld /usr/local/bin/mips64-octeon-linux-ld
            ln -sf /usr/bin/mips64-linux-gnuabi64-ar /usr/local/bin/mips64-octeon-linux-ar
            ln -sf /usr/bin/mips64-linux-gnuabi64-strip /usr/local/bin/mips64-octeon-linux-strip
            ln -sf /usr/bin/mips64-linux-gnuabi64-objcopy /usr/local/bin/mips64-octeon-linux-objcopy
            ln -sf /usr/bin/mips64-linux-gnuabi64-objdump /usr/local/bin/mips64-octeon-linux-objdump
            ln -sf /usr/bin/mips64-linux-gnuabi64-nm /usr/local/bin/mips64-octeon-linux-nm
            ln -sf /usr/bin/mips64-linux-gnuabi64-ranlib /usr/local/bin/mips64-octeon-linux-ranlib
            export PATH="/usr/local/bin:$PATH"
          elif [ "${{ matrix.toolchain }}" = "mipsel-mtk-linux-" ]; then
            apt-get install -y gcc-mipsel-linux-gnu g++-mipsel-linux-gnu binutils-mipsel-linux-gnu
            mkdir -p /usr/local/bin
            ln -sf /usr/bin/mipsel-linux-gnu-gcc /usr/local/bin/mipsel-mtk-linux-gcc
            ln -sf /usr/bin/mipsel-linux-gnu-g++ /usr/local/bin/mipsel-mtk-linux-g++
            ln -sf /usr/bin/mipsel-linux-gnu-ld /usr/local/bin/mipsel-mtk-linux-ld
            ln -sf /usr/bin/mipsel-linux-gnu-ar /usr/local/bin/mipsel-mtk-linux-ar
            ln -sf /usr/bin/mipsel-linux-gnu-strip /usr/local/bin/mipsel-mtk-linux-strip
            ln -sf /usr/bin/mipsel-linux-gnu-objcopy /usr/local/bin/mipsel-mtk-linux-objcopy
            ln -sf /usr/bin/mipsel-linux-gnu-objdump /usr/local/bin/mipsel-mtk-linux-objdump
            ln -sf /usr/bin/mipsel-linux-gnu-nm /usr/local/bin/mipsel-mtk-linux-nm
            ln -sf /usr/bin/mipsel-linux-gnu-ranlib /usr/local/bin/mipsel-mtk-linux-ranlib
            export PATH="/usr/local/bin:$PATH"
          fi
      - name: Restore module source
        uses: actions/download-artifact@v4
        with:
          name: module-src
          path: module
      - name: Restore headers
        uses: actions/download-artifact@v4
        with:
          name: headers-${{ matrix.device }}-${{ matrix.version }}
      - name: Build module
        run: |
          export PATH="/usr/local/bin:$PATH"
          tar -xf headers.tar
          cd module/src
          
          echo "=== Current module/src structure ==="
          ls -la
          echo "=== Looking for Makefiles ==="
          find . -name "Makefile*" -o -name "*.mk"
          
          mkdir -p generated
          
          if [ -f "Makefile" ]; then
            echo "=== Main Makefile content (first 20 lines) ==="
            head -20 Makefile
          fi
          
          echo "=== Starting module build ==="
          if ! make -j$(nproc) ARCH=mips CROSS_COMPILE=${{ matrix.toolchain }} KERNELDIR=$GITHUB_WORKSPACE/headers V=1 module; then
            echo "=== Build failed, trying alternative approach ==="
            
            if [ ! -f "version.h" ] && [ -f "../scripts/version.sh" ]; then
              echo "Generating version.h..."
              ../scripts/version.sh > version.h
            fi
            
            if ! make -j$(nproc) ARCH=mips CROSS_COMPILE=${{ matrix.toolchain }} KERNELDIR=$GITHUB_WORKSPACE/headers V=1 modules; then
              if ! make -j$(nproc) ARCH=mips CROSS_COMPILE=${{ matrix.toolchain }} KERNELDIR=$GITHUB_WORKSPACE/headers V=1 all; then
                echo "=== All build attempts failed, showing detailed info ==="
                echo "Available make targets:"
                make help 2>/dev/null || echo "No help available"
                echo "KERNELDIR contents:"
                ls -la $GITHUB_WORKSPACE/headers/ | head -10
                exit 1
              fi
            fi
          fi
          
          if [ -f "wireguard.ko" ]; then
            ${{ matrix.toolchain }}strip --strip-debug wireguard.ko
            echo "=== Module built successfully ==="
            ls -la wireguard.ko
          else
            echo "=== wireguard.ko not found, checking for other .ko files ==="
            find . -name "*.ko"
            exit 1
          fi
      - name: Upload built module
        uses: actions/upload-artifact@v4
        with:
          name: module-${{ matrix.device }}-${{ matrix.version }}
          path: module/src/wireguard.ko

  tools:
    runs-on: ubuntu-24.04
    timeout-minutes: 60

    strategy:
      matrix:
        include:
          - arch: mips
            target: mips-linux-musl
          - arch: mipsel
            target: mipsel-linux-musl
    steps:
      - uses: actions/checkout@v4
      - name: Setup cross-compilation environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential xz-utils
          
          # Use system cross-compilation packages instead of musl.cc
          ARCH="${{ matrix.arch }}"
          
          if [ "$ARCH" = "mips" ]; then
            sudo apt-get install -y gcc-mips-linux-gnu
            TOOLCHAIN_PREFIX="mips-linux-gnu"
          else
            sudo apt-get install -y gcc-mipsel-linux-gnu
            TOOLCHAIN_PREFIX="mipsel-linux-gnu"
          fi
          
          echo "TOOLCHAIN_PREFIX=${TOOLCHAIN_PREFIX}" >> $GITHUB_ENV
          echo "TOOLCHAIN_DIR=/usr" >> $GITHUB_ENV
          
      - name: Verify cross-compilation setup
        run: |
          echo "Checking cross-compiler:"
          which ${TOOLCHAIN_PREFIX}-gcc || echo "Compiler not found in PATH"
          ${TOOLCHAIN_PREFIX}-gcc --version || echo "Compiler execution failed"
      - name: Build tools
        env:
          TARGET: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}
        run: |
          # Download with retry logic
          for attempt in {1..3}; do
            if curl -L -o wireguard-tools-$TOOLS_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-tools/archive/refs/tags/v$TOOLS_VERSION.tar.gz; then
              break
            fi
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          
          tar -xf wireguard-tools-$TOOLS_VERSION.tar.gz
          
          # Check what directory was actually created
          echo "=== Extracted contents ==="
          ls -la
          
          # Find the actual directory name (it might be amneziawg-tools-$TOOLS_VERSION)
          ACTUAL_DIR=$(find . -maxdepth 1 -type d -name "*tools*" | head -1)
          if [ -z "$ACTUAL_DIR" ]; then
            echo "ERROR: Could not find extracted tools directory"
            ls -la
            exit 1
          fi
          
          echo "Found tools directory: $ACTUAL_DIR"
          mv "$ACTUAL_DIR" tools
          
          cd tools/src
          # Use system cross-compiler with static linking
          CC="${TOOLCHAIN_PREFIX}-gcc" LDFLAGS="-static" make -j$(nproc)
          ${TOOLCHAIN_PREFIX}-strip --strip-unneeded wg
      - name: Upload built tools
        uses: actions/upload-artifact@v4
        with:
          name: tools-${{ matrix.arch }}
          path: tools/src/wg

  package:
    needs: [module, tools]
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    container:
      image: ubuntu:24.04

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        arch: [mips]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            arch: mipsel
          - device: e50
            version: 2
            arch: mipsel
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y kmod dpkg-deb
      - name: Download module
        uses: actions/download-artifact@v4
        with:
          name: module-${{ matrix.device }}-${{ matrix.version }}
      - name: Download tools
        uses: actions/download-artifact@v4
        with:
          name: tools-${{ matrix.arch }}
      - name: Build package
        run: |
          export KERNEL=$(modinfo -F vermagic wireguard.ko | cut -d ' ' -f 1)
          mkdir -p pkg/usr/bin pkg/lib/modules/$KERNEL/kernel/net
          cp -r debian pkg/DEBIAN
          cp -r opt pkg/opt
          cp wireguard.ko pkg/lib/modules/$KERNEL/kernel/net/wireguard.ko
          cp wg pkg/usr/bin/wg
          chmod +x pkg/usr/bin/wg
          sed -i "s/PACKAGE_VERSION/$MODULE_VERSION/g" pkg/DEBIAN/control
          sed -i "s/PACKAGE_RELEASE/$PACKAGE_RELEASE/g" pkg/DEBIAN/control
          sed -i "s/KERNEL_VER/$KERNEL/g" pkg/DEBIAN/preinst
          sed -i "s/PACKAGE_ARCH/${{ matrix.arch }}/g" pkg/DEBIAN/control
          dpkg-deb -b -Z gzip pkg
          mv pkg.deb ${{ matrix.device }}-v${{ matrix.version }}-v$MODULE_VERSION-v$TOOLS_VERSION.deb
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: release_${{ matrix.device }}-v${{ matrix.version }}
          path: ${{ matrix.device }}-v${{ matrix.version }}-v${{ env.MODULE_VERSION }}-v${{ env.TOOLS_VERSION }}.deb

  udm-prepare-buildroot:
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            m4 \
            autoconf \
            automake \
            libtool \
            pkg-config \
            kmod \
            lzip \
            ccache \
            bison \
            flex \
            gettext \
            libncurses5-dev \
            rsync \
            unzip \
            bc \
            wget \
            cpio \
            curl \
            ca-certificates \
            patch
      - name: Download buildroot-2017.11.1
        run: |
          curl -o buildroot.tar.bz2 https://buildroot.org/downloads/buildroot-2017.11.1.tar.bz2
          tar -xf buildroot.tar.bz2
      - name: Download WireGuard module source
        run: |
          curl -L -o wireguard-linux-compat-$MODULE_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-linux-kernel-module/archive/refs/tags/v$MODULE_VERSION.tar.gz
          gunzip wireguard-linux-compat-$MODULE_VERSION.tar.gz
      - name: Download WireGuard tools source
        run: |
          curl -L -o wireguard-tools-$TOOLS_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-tools/archive/refs/tags/v$TOOLS_VERSION.tar.gz
          gunzip wireguard-tools-$TOOLS_VERSION.tar.gz
      - name: Copy packages
        run: cp -pr unifios/packages/* buildroot-2017.11.1/package
      - name: Copy WireGuard source
        run: |
          cp wireguard-linux-compat-$MODULE_VERSION.tar buildroot-2017.11.1/package/wireguard-linux-compat/
          cp wireguard-tools-$TOOLS_VERSION.tar buildroot-2017.11.1/package/wireguard-tools/
      - name: Set package versions
        run: |
          sed -i "s/PACKAGE_VERSION/$MODULE_VERSION/g" buildroot-2017.11.1/package/wireguard-linux-compat/wireguard-linux-compat.mk
          sed -i "s/PACKAGE_VERSION/$TOOLS_VERSION/g" buildroot-2017.11.1/package/wireguard-tools/wireguard-tools.mk
      - name: Patches
        run: |
          patch -p0 <unifios/patches/wireguard-packages.patch
          patch -p0 <unifios/patches/openresolv-package.patch
          patch -d buildroot-2017.11.1 -p1 <unifios/patches/add-kernel-4-19.patch
          cp unifios/patches/0001-m4-glibc-change-work-around.patch buildroot-2017.11.1/package/m4
          cp unifios/patches/0001-bison-glibc-change-work-around.patch buildroot-2017.11.1/package/bison
          cp unifios/patches/944-mpc-relative-literal-loads-logic-in-aarch64_classify_symbol.patch buildroot-2017.11.1/package/gcc/6.4.0
      - name: Fix M4 SIGSTKSZ compatibility issue
        run: |
          cd buildroot-2017.11.1
          
          # Create the patch file with proper EOF delimiter
          cat > package/m4/0002-fix-sigstksz-glibc-compatibility.patch << 'EOF'
--- a/lib/c-stack.c
+++ b/lib/c-stack.c
@@ -50,11 +50,17 @@
 #if ! HAVE_STACK_OVERFLOW_HANDLING
 
 # include <sigsegv.h>
-
-#elif HAVE_LIBSIGSEGV && SIGSTKSZ < 16384
+#elif HAVE_LIBSIGSEGV
 
 /* libsigsegv 2.6 through 2.8 have a bug where some architectures use
    more than the Linux default of an 8k alternate stack when deciding
    if a fault was caused by stack overflow.  */
+
+# ifdef SIGSTKSZ
+#  if SIGSTKSZ < 16384
+#   define STACKSIZE 16384
+#  else
+#   define STACKSIZE SIGSTKSZ
+#  endif
+# else
+#  define STACKSIZE 16384
+# endif
-# define STACKSIZE 16384
-
-#else
+#else /* !HAVE_LIBSIGSEGV */
 
 # define STACKSIZE SIGSTKSZ
-
-#endif
+#endif /* !HAVE_LIBSIGSEGV */
 
 #if HAVE_STACK_OVERFLOW_HANDLING
EOF
          
          # Add the patch to the M4 package makefile
          if ! grep -q "0002-fix-sigstksz-glibc-compatibility.patch" package/m4/m4.mk; then
            echo "Adding SIGSTKSZ compatibility patch to M4"
            # Create backup
            cp package/m4/m4.mk package/m4/m4.mk.bak
            # Add patch to the makefile safely
            awk '/M4_PATCH = / { 
              print $0 " \\"
              print "\tpackage/m4/0002-fix-sigstksz-glibc-compatibility.patch"
              next 
            } 
            1' package/m4/m4.mk.bak > package/m4/m4.mk || echo "Could not modify m4.mk, continuing"
          fi
      - name: Initialize buildroot
        run: |
          cd buildroot-2017.11.1
          # Create output directory structure first
          mkdir -p output
          # Create a proper .br-external.mk file for buildroot 2017.11.1
          echo "# This file is automatically generated by buildroot" > output/.br-external.mk
          echo "# DO NOT EDIT" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of directories containing external packages" >> output/.br-external.mk
          echo "BR2_EXTERNAL :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external packages" >> output/.br-external.mk
          echo "BR2_EXTERNAL_NAMES :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external makefiles" >> output/.br-external.mk
          echo "BR2_EXTERNAL_MKS :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external package descriptions" >> output/.br-external.mk
          echo "BR2_EXTERNAL_DESCS :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external package dependencies" >> output/.br-external.mk
          echo "BR2_EXTERNAL_DEPS :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          # Initialize with defconfig to create basic structure
          make defconfig
          # Ensure output structure exists
          mkdir -p output/build output/target output/host output/staging
      - name: Generate artifacts
        run: tar -cf buildroot.tar buildroot-2017.11.1
      - name: Store buildroot
        uses: actions/upload-artifact@v4
        with:
          name: buildroot
          path: buildroot.tar

  udm-build-modules:
    needs: [udm-prepare-buildroot]
    runs-on: ubuntu-24.04
    timeout-minutes: 180
    strategy:
      matrix:
        base: [udm-1.9.0-10, udm-1.10.0-8, udm-1.10.0-12, udm-se-2.2.4, udr-2.2.12]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            m4 \
            autoconf \
            automake \
            libtool \
            pkg-config \
            kmod \
            lzip \
            ccache \
            bison \
            flex \
            gettext \
            libncurses5-dev \
            rsync \
            unzip \
            bc \
            wget \
            cpio \
            curl \
            ca-certificates \
            patch
      - name: Restore buildroot
        uses: actions/download-artifact@v4
        with:
          name: buildroot
      - name: Extract buildroot
        run: tar -xf buildroot.tar
      - name: Debug buildroot state
        run: |
          echo "Buildroot directory contents:"
          ls -la buildroot-2017.11.1/
          echo "Checking for config files:"
          ls -la unifios/bases/${{ matrix.base }}/ || echo "Base config directory not found"
          echo "Checking versions file:"
          cat unifios/bases/${{ matrix.base }}/versions.txt || echo "Versions file not found"
      - name: Configure buildroot
        run: |
          cd buildroot-2017.11.1
          
          # Ensure output directory structure exists
          mkdir -p output/build output/target output/host output/staging
          
          # Recreate the .br-external.mk file if it doesn't exist
          if [ ! -f "output/.br-external.mk" ]; then
            echo "# This file is automatically generated by buildroot" > output/.br-external.mk
            echo "# DO NOT EDIT" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of directories containing external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL_NAMES :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external makefiles" >> output/.br-external.mk
            echo "BR2_EXTERNAL_MKS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package descriptions" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DESCS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package dependencies" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DEPS :=" >> output/.br-external.mk
          fi
          
          # Copy configs
          cp ../unifios/bases/${{ matrix.base }}/buildroot-config.txt .config
          cp ../unifios/bases/${{ matrix.base }}/kernel-config kernel-config
          
          # Configure buildroot
          make olddefconfig
      - name: Verify buildroot setup
        run: |
          cd buildroot-2017.11.1
          echo "=== Buildroot Setup Verification ==="
          echo "Working directory: $(pwd)"
          echo "Output directory contents:"
          ls -la output/ || echo "No output directory"
          echo "BR External makefile:"
          ls -la output/.br-external.mk && echo "Content:" && head -5 output/.br-external.mk || echo "File missing"
          echo "Config file:"
          ls -la .config || echo "No .config file"
          echo "Kernel config:"
          ls -la kernel-config || echo "No kernel-config file"
          echo "Testing make dry-run:"
          make -n help >/dev/null && echo "Make system functional" || echo "Make system has issues"
      - name: Build wireguard module
        run: |
          mkdir -p modules
          versions="$(cat unifios/bases/${{ matrix.base }}/versions.txt)"
          prefix="$(cat unifios/bases/${{ matrix.base }}/prefix)"
          
          # Validate versions
          if [ -z "$versions" ]; then
            echo "Error: No versions found for ${{ matrix.base }}"
            exit 1
          fi
          
          echo "Building for versions: $versions"
          echo "Using prefix: $prefix"
          
          rm -rf ./buildroot-2017.11.1/linux-patches ./buildroot-2017.11.1/patches
          if [ -d "unifios/bases/${{ matrix.base }}/linux-patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/linux-patches" ./buildroot-2017.11.1/
          fi
          if [ -f "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz" ]; then
            tar -C ./buildroot-2017.11.1 -xf "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz"
          fi
          if [ -d "unifios/bases/${{ matrix.base }}/patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/patches" ./buildroot-2017.11.1/
          fi
          
          cd buildroot-2017.11.1
          
          # Set host compiler flags for DTC compatibility
          export HOSTCFLAGS="-fcommon"
          export HOSTCXXFLAGS="-fcommon"
          
          (IFS=','
          for ver in $versions; do
            echo "=== Building version $ver ==="
            
            # Verify buildroot state before build
            if [ ! -f "output/.br-external.mk" ]; then
              echo "Error: .br-external.mk missing before build"
              ls -la output/
              exit 1
            fi
            
            # Check if clean target exists before using it
            if make -n wireguard-linux-compat-dirclean >/dev/null 2>&1; then
              echo "Cleaning previous build..."
              make wireguard-linux-compat-dirclean || echo "Clean failed, continuing"
            else
              echo "Clean target not available, skipping"
            fi
            
            echo "Setting kernel version to: $ver"
            sed -i -e '/CONFIG_LOCALVERSION=/s/.*/CONFIG_LOCALVERSION="'$ver'"/' kernel-config
            
            # Build with detailed error reporting and DTC fixes
            echo "Starting build for version $ver..."
            if ! make wireguard-linux-compat-rebuild -j$(nproc) HOSTCFLAGS="-fcommon"; then
              echo "=== BUILD FAILED for version $ver ==="
              echo "Build directory contents:"
              ls -la output/build/ || echo "No build directory"
              echo "Checking for build logs:"
              find output -name "*.log" -exec echo "=== {} ===" \; -exec tail -20 {} \; 2>/dev/null || echo "No logs found"
              echo "Makefile targets available:"
              make help | grep wireguard || echo "No wireguard targets found"
              # Show specific error details
              if [ -f "output/build/build-time.log" ]; then
                echo "=== Build time log ==="
                tail -50 output/build/build-time.log
              fi
              exit 1
            fi
            
            # Copy files with error checking
            if [ ! -f "output/build/wireguard-linux-compat-$MODULE_VERSION/src/wireguard.ko" ]; then
              echo "Error: wireguard.ko not found for version $ver"
              ls -la output/build/wireguard-linux-compat-$MODULE_VERSION/src/ || echo "Source directory not found"
              exit 1
            fi
            
            cp output/build/wireguard-linux-compat-$MODULE_VERSION/src/wireguard.ko ../modules/wireguard-${prefix}${ver}.ko
            
            # Copy netfilter modules if they exist
            if [ -f "output/build/linux-custom/net/ipv4/netfilter/iptable_raw.ko" ]; then
              cp output/build/linux-custom/net/ipv4/netfilter/iptable_raw.ko ../modules/iptable_raw-${prefix}${ver}.ko
            else
              echo "Warning: iptable_raw.ko not found for version $ver"
            fi
            
            if [ -f "output/build/linux-custom/net/ipv6/netfilter/ip6table_raw.ko" ]; then
              cp output/build/linux-custom/net/ipv6/netfilter/ip6table_raw.ko ../modules/ip6table_raw-${prefix}${ver}.ko
            else
              echo "Warning: ip6table_raw.ko not found for version $ver"
            fi
          done)
      - name: Verify built modules
        run: |
          echo "Built modules:"
          ls -la modules/
          # Check that we have at least some modules
          if [ -z "$(ls modules/)" ]; then
            echo "Error: No modules were built"
            exit 1
          fi
      - name: Store modules
        uses: actions/upload-artifact@v4
        with:
          name: modules-${{ matrix.base }}
          path: modules

  udm-build-tools:
    needs: [udm-prepare-buildroot]
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    env:
      BASE: udm-1.9.0-10
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            m4 \
            autoconf \
            automake \
            libtool \
            pkg-config \
            kmod \
            lzip \
            ccache \
            bison \
            flex \
            gettext \
            libncurses5-dev \
            rsync \
            unzip \
            bc \
            wget \
            cpio \
            curl \
            ca-certificates \
            patch
      - name: Restore buildroot
        uses: actions/download-artifact@v4
        with:
          name: buildroot
      - name: Extract buildroot
        run: tar -xf buildroot.tar
      - name: Configure buildroot
        run: |
          cd buildroot-2017.11.1
          
          # Ensure output directory structure exists
          mkdir -p output/build output/target output/host output/staging
          
          # Recreate the .br-external.mk file if it doesn't exist
          if [ ! -f "output/.br-external.mk" ]; then
            echo "# This file is automatically generated by buildroot" > output/.br-external.mk
            echo "# DO NOT EDIT" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of directories containing external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL_NAMES :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external makefiles" >> output/.br-external.mk
            echo "BR2_EXTERNAL_MKS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package descriptions" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DESCS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package dependencies" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DEPS :=" >> output/.br-external.mk
          fi
          
          # Copy configs
          cp ../unifios/bases/${{ env.BASE }}/buildroot-config.txt .config
          cp ../unifios/bases/${{ env.BASE }}/kernel-config kernel-config
          
          # Configure buildroot
          make olddefconfig
      - name: Build WireGuard tools
        run: |
          cd buildroot-2017.11.1
          # Set host compiler flags for DTC compatibility
          export HOSTCFLAGS="-fcommon"
          export HOSTCXXFLAGS="-fcommon"
          make wireguard-tools-rebuild -j$(nproc) HOSTCFLAGS="-fcommon" # -> output/target/usr/bin/wg
      - name: Build bash
        run: |
          cd buildroot-2017.11.1
          export HOSTCFLAGS="-fcommon"
          export HOSTCXXFLAGS="-fcommon"
          make bash-rebuild -j$(nproc) HOSTCFLAGS="-fcommon" # -> output/target/bin/bash
      - name: Build resolvconf
        run: |
          cd buildroot-2017.11.1
          export HOSTCFLAGS="-fcommon"
          export HOSTCXXFLAGS="-fcommon"
          make openresolv-rebuild -j$(nproc) HOSTCFLAGS="-fcommon" # -> output/target/sbin/resolvconf
      - name: Build qrencode
        run: |
          cd buildroot-2017.11.1
          export HOSTCFLAGS="-fcommon"
          export HOSTCXXFLAGS="-fcommon"
          make libqrencode-rebuild -j$(nproc) HOSTCFLAGS="-fcommon" # -> output/target/usr/bin/qrencode
      - name: Collect tools
        run: |
          mkdir -p tools
          cd buildroot-2017.11.1
          
          # Copy tools with error checking
          if [ -f "output/target/usr/bin/wg" ]; then
            cp output/target/usr/bin/wg ../tools/
          else
            echo "Error: wg tool not found"
            exit 1
          fi
          
          if [ -f "output/target/bin/bash" ]; then
            cp output/target/bin/bash ../tools/
          else
            echo "Warning: bash not found, continuing"
          fi
          
          if [ -f "output/target/usr/bin/qrencode" ]; then
            cp output/target/usr/bin/qrencode ../tools/
          else
            echo "Warning: qrencode not found, continuing"
          fi
          
          if [ -f "output/target/sbin/resolvconf" ]; then
            cp output/target/sbin/resolvconf ../tools/
          else
            echo "Warning: resolvconf not found, continuing"
          fi
          
          if [ -f "output/target/etc/resolvconf.conf" ]; then
            cp output/target/etc/resolvconf.conf ../tools/
          else
            echo "Warning: resolvconf.conf not found, continuing"
          fi
          
          # Check for wg-quick in the build directory - try both locations
          if [ -f "output/build/wireguard-tools-$TOOLS_VERSION/src/wg-quick/linux.bash" ]; then
            cp output/build/wireguard-tools-$TOOLS_VERSION/src/wg-quick/linux.bash ../tools/wg-quick
          elif [ -f "output/build/amneziawg-tools-$TOOLS_VERSION/src/wg-quick/linux.bash" ]; then
            cp output/build/amneziawg-tools-$TOOLS_VERSION/src/wg-quick/linux.bash ../tools/wg-quick
          else
            echo "Warning: wg-quick not found, checking available directories..."
            find output/build -name "linux.bash" -type f || echo "No wg-quick script found"
          fi
      - name: Store tools
        uses: actions/upload-artifact@v4
        with:
          name: tools
          path: tools

  udm-package:
    needs: [udm-build-tools, udm-build-modules]
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Prepare
        run: mkdir -p package package/wireguard package/wireguard/modules package/wireguard/tools package/wireguard/etc
      - name: Restore modules from all builds
        run: |
          mkdir -p temp-modules
          # Download each module artifact individually
          for base in udm-1.9.0-10 udm-1.10.0-8 udm-1.10.0-12 udm-se-2.2.4 udr-2.2.12; do
            echo "Downloading modules for $base"
          done
      - name: Download udm-1.9.0-10 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-1.9.0-10
          path: temp-modules/udm-1.9.0-10
        continue-on-error: true
      - name: Download udm-1.10.0-8 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-1.10.0-8
          path: temp-modules/udm-1.10.0-8
        continue-on-error: true
      - name: Download udm-1.10.0-12 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-1.10.0-12
          path: temp-modules/udm-1.10.0-12
        continue-on-error: true
      - name: Download udm-se-2.2.4 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-se-2.2.4
          path: temp-modules/udm-se-2.2.4
        continue-on-error: true
      - name: Download udr-2.2.12 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udr-2.2.12
          path: temp-modules/udr-2.2.12
        continue-on-error: true
      - name: Consolidate modules
        run: |
          # Move all modules to the package directory
          find temp-modules -name "*.ko" -exec cp {} package/wireguard/modules/ \;
          echo "Consolidated modules:"
          ls -la package/wireguard/modules/
      - name: Restore tools
        uses: actions/download-artifact@v4
        with:
          name: tools
          path: package/wireguard/tools
      - name: Add setup
        run: cp unifios/setup_wireguard.sh package/wireguard/
      - name: Fix permissions
        run: |
          if [ -f "package/wireguard/tools/resolvconf.conf" ]; then
            mv package/wireguard/tools/resolvconf.conf package/wireguard/etc
          fi
          chmod +x package/wireguard/tools/* package/wireguard/setup_wireguard.sh 2>/dev/null || true
          sudo chown -R root:root package/wireguard
      - name: Package
        run: tar -C package -czf UnifiOS-$MODULE_VERSION-$TOOLS_VERSION.tar.gz ./
      - name: Store package
        uses: actions/upload-artifact@v4
        with:
          name: release_unifios
          path: UnifiOS-${{ env.MODULE_VERSION }}-${{ env.TOOLS_VERSION }}.tar.gz

  release:
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    needs:
      - package
      - udm-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: fossoreslp/release-artifacts@v1
        with:
          title: WireGuard ${{ env.MODULE_VERSION }} ${{ env.TOOLS_VERSION }}
          template: ci/release_body.md
          token: ${{ secrets.GITHUB_TOKEN }}
          variables: ${{ toJSON(env) }}
