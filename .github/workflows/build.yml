name: Build kernel module and tools

on:
  push:
    branches:
      - "master"
  pull_request:
  workflow_dispatch:

env:
  MODULE_VERSION: "1.0.20241112"
  TOOLS_VERSION: "1.0.20250706"
  PACKAGE_RELEASE: "1"
  FIRMWARE_ER_v1: "v1.10.11"
  FIRMWARE_ER_v2: "v2.0.9"
  FIRMWARE_UGW: "4.4.50"

jobs:
  docker:
    uses: ./.github/workflows/docker.yml
    secrets: inherit

  headers:
    needs: docker
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/${{ github.repository_owner }}/ubnt-build:${{ matrix.image }}
      env:
        CROSS: ${{ matrix.toolchain }}

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        toolchain: [mips64-octeon-linux-]
        image: [octeon-kernel]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            toolchain: mipsel-mtk-linux-
            image: mtk-kernel
          - device: e50
            version: 2
            toolchain: mipsel-linux-gnu-
            image: mipsel-kernel

    steps:
      - uses: actions/checkout@v2
      - name: Build headers
        run: |
          mkdir /headers
          curl -o src.tar.bz2 $(jq -r '.["${{ matrix.device }}"]["${{ matrix.version }}"]' ci/ubnt-source.json)
          tar -xf src.tar.bz2 --wildcards 'source/kernel_*' --strip-components 1
          mv kernel_* kernel.tar.gz
          tar -xf kernel.tar.gz --strip-components 1
          # Fix dtc multiple definition issue with newer build tools
          echo "Applying comprehensive DTC fix..."
          # Apply improved DTC fix that changes declaration to extern
          find . -name "dtc-lexer.l" -exec grep -l "YYLTYPE yylloc;" {} \; | while read -r file; do
            echo "Applying improved DTC fix to $file"
            # Change to extern declaration to avoid multiple definitions
            sed -i 's/YYLTYPE yylloc;/extern YYLTYPE yylloc;/' "$file"
            # Add YYLTYPE_IS_DECLARED to ensure proper bison integration
            if ! grep -q "YYLTYPE_IS_DECLARED" "$file"; then
              sed -i '/%{/a #ifndef YYLTYPE_IS_DECLARED\n#define YYLTYPE_IS_DECLARED 1\n#endif' "$file"
            fi
          done
          echo "Applied improved dtc fix to all dtc-lexer.l files"
          # Also apply to any generated files that might exist
          find . -name "dtc-lexer.lex.c" -exec grep -l "YYLTYPE yylloc;" {} \; | while read -r file; do
            echo "Applying DTC fix to generated file $file"
            sed -i 's/YYLTYPE yylloc;/extern YYLTYPE yylloc;/' "$file"
          done
          # Note: DTC file regeneration handled in later step
          if [ ${{ matrix.version }} -ne 1 ]; then make ARCH=mips ubnt_er_${{ matrix.device }}_defconfig; fi;
          # Ensure DTC fix is applied before make commands
          find . -name "dtc-lexer.l" -exec grep -l "YYLTYPE yylloc;" {} \; | while read -r file; do
            echo "Pre-make DTC fix to $file"
            sed -i 's/YYLTYPE yylloc;/extern YYLTYPE yylloc;/' "$file"
          done
          # Modify DTC build to avoid multiple definition issues and fix include paths
          if [ -f scripts/dtc/Makefile ]; then
            # Try multiple approaches to add linker flags
            if grep -q "hostprogs-y.*dtc" scripts/dtc/Makefile; then
              # Method 1: HOSTLDFLAGS for DTC specifically - force multiple definition acceptance
              echo "HOSTLDFLAGS_dtc := -Wl,--allow-multiple-definition -Wl,--warn-common" >> scripts/dtc/Makefile
              # Method 2: Override the linking command entirely for DTC
              echo "" >> scripts/dtc/Makefile
              echo "# Custom DTC linking rule to handle yylloc multiple definitions" >> scripts/dtc/Makefile
              echo "\$(obj)/dtc: \$(dtc-objs)" >> scripts/dtc/Makefile
              echo "	\$(HOSTCC) \$(dtc-objs) -Wl,--allow-multiple-definition -o \$@" >> scripts/dtc/Makefile
              # Method 3: Add compiler flags
              echo "HOSTCFLAGS_dtc-lexer.lex.o := -DYYLTYPE_IS_DECLARED -I. -Iscripts/dtc/libfdt" >> scripts/dtc/Makefile
              echo "HOSTCFLAGS_dtc-parser.tab.o := -DYYLTYPE_IS_DECLARED -I. -Iscripts/dtc/libfdt" >> scripts/dtc/Makefile  
              echo "HOSTCFLAGS_dtc := -I. -Iscripts/dtc/libfdt -DYYLTYPE_IS_DECLARED" >> scripts/dtc/Makefile
              echo "Added comprehensive DTC fixes with custom linking rule to Makefile"
            fi
          fi
          # Find and fix libfdt include paths
          echo "Checking for libfdt_env.h..."
          if [ -f scripts/dtc/libfdt/libfdt_env.h ]; then
            echo "Found libfdt_env.h in libfdt subdirectory"
            if [ ! -f scripts/dtc/libfdt_env.h ]; then
              echo "Creating symlink for libfdt_env.h"
              ln -sf libfdt/libfdt_env.h scripts/dtc/libfdt_env.h
            fi
          elif find . -name "libfdt_env.h" -type f | head -1; then
            LIBFDT_PATH=$(find . -name "libfdt_env.h" -type f | head -1 | dirname)
            echo "Found libfdt_env.h at $LIBFDT_PATH"
            ln -sf "$LIBFDT_PATH/libfdt_env.h" scripts/dtc/libfdt_env.h
          else
            echo "libfdt_env.h not found, creating it..."
            $GITHUB_WORKSPACE/create_libfdt_env.sh || {
              echo "Script failed, creating manually..."
              mkdir -p scripts/dtc
              printf '#ifndef LIBFDT_ENV_H\n#define LIBFDT_ENV_H\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\ntypedef uint16_t fdt16_t;\ntypedef uint32_t fdt32_t;\ntypedef uint64_t fdt64_t;\n#define fdt16_to_cpu(x) be16toh(x)\n#define cpu_to_fdt16(x) htobe16(x)\n#define fdt32_to_cpu(x) be32toh(x)\n#define cpu_to_fdt32(x) htobe32(x)\n#define fdt64_to_cpu(x) be64toh(x)\n#define cpu_to_fdt64(x) htobe64(x)\n#endif\n' > scripts/dtc/libfdt_env.h
            }
          fi
          # Set environment variables to handle DTC build issues  
          export HOSTLDFLAGS="-Wl,--allow-multiple-definition -Wl,--warn-common"
          export HOSTCFLAGS="-DYYLTYPE_IS_DECLARED -DYYLTYPE_IS_TRIVIAL -I. -Iscripts/dtc/libfdt"
          # Force deletion and regeneration of DTC files to ensure our fixes are applied
          find . -name "dtc-lexer.lex.c" -delete
          find . -name "dtc-parser.tab.c" -delete  
          find . -name "dtc-parser.tab.h" -delete
          # Pre-compile the scripts target first to fix generated files
          echo "Pre-compiling scripts to fix DTC files..."
          make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS scripts || {
            # If it fails, apply comprehensive fixes to generated files and try again
            echo "First scripts build failed, applying fixes to generated files..."
            # Fix lexer file - make yylloc extern
            find . -name "dtc-lexer.lex.c" -exec grep -l "YYLTYPE yylloc;" {} \; | while read -r file; do
              echo "Fixing generated lexer file $file"
              sed -i 's/YYLTYPE yylloc;/extern YYLTYPE yylloc;/' "$file"
            done
            # Fix parser file - ensure it's the only one defining yylloc
            find . -name "dtc-parser.tab.c" -exec grep -l "YYLTYPE yylloc;" {} \; | while read -r file; do
              echo "Ensuring parser file $file defines yylloc"
              # Make sure there's only one definition in the parser
              if ! grep -q "extern YYLTYPE yylloc;" "$file"; then
                # If it doesn't have extern, leave it as is (it should define it)
                echo "Parser file $file will define yylloc"
              else
                # If it has extern, change it to definition
                sed -i 's/extern YYLTYPE yylloc;/YYLTYPE yylloc;/' "$file"
                echo "Changed parser file $file to define yylloc"
              fi
            done
            # Try scripts build again
            make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS scripts
          }
          make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS prepare modules_prepare
          make -j$(nproc) ARCH=mips CROSS_COMPILE=$CROSS modules #vmlinux
          cp Module.symvers .config /headers
          make mrproper
          # Apply comprehensive DTC fix again after mrproper cleans everything
          echo "Re-applying comprehensive DTC fix after mrproper..."
          find . -name "dtc-lexer.l" -exec grep -l "YYLTYPE yylloc;" {} \; | while read -r file; do
            echo "Re-applying DTC fix to $file"
            sed -i 's/YYLTYPE yylloc;/extern YYLTYPE yylloc;/' "$file"
          done
          # Re-export environment variables for second build
          export HOSTLDFLAGS="-Wl,--allow-multiple-definition"
          export HOSTCFLAGS="-DYYLTYPE_IS_DECLARED"
          make -j$(nproc) ARCH=mips O=/headers CROSS_COMPILE=$CROSS prepare modules_prepare scripts
          rm /headers/source /headers/Makefile
          # This is from alpine linux who in turn got it from
          # http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
          find . -path './include/*' -prune -o -path './scripts/*' -prune -o -type f \( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) -print | cpio -pdm "/headers"
          cp -a scripts include "/headers"
          find $(find arch -name include -type d -print) -type f | cpio -pdm "/headers"
          tar -cf headers.tar /headers/
      - name: Store headers
        uses: actions/upload-artifact@v4
        with:
          name: headers-${{ matrix.device }}-${{ matrix.version }}
          path: headers.tar

  module-prepare:
    runs-on: ubuntu-24.04
    container:
      image: buildpack-deps:focal

    steps:
      - uses: actions/checkout@v2
      - name: Download module source
        run: |
          curl -L -o amneziawg-linux-kernel-module-$MODULE_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-linux-kernel-module/archive/refs/tags/v$MODULE_VERSION.tar.gz
          tar -xf amneziawg-linux-kernel-module-$MODULE_VERSION.tar.gz --one-top-level=module --strip-components=1
          cd module
          sed -i 's/ --dirty//g' src/Makefile
          patch -p1 < ../siphash_no_fallthrough.patch
      - name: Upload module source
        uses: actions/upload-artifact@v4
        with:
          name: module-src
          path: module

  module:
    needs: [docker, module-prepare, headers]
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/${{ github.repository_owner }}/ubnt-build:${{ matrix.image }}

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        toolchain: [mips64-octeon-linux-]
        image: [octeon-kernel]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            toolchain: mipsel-mtk-linux-
            image: mtk-kernel
          - device: e50
            version: 2
            toolchain: mipsel-mtk-linux-
            image: mtk-kernel

    steps:
      - uses: actions/checkout@v2
      - name: Restore module source
        uses: actions/download-artifact@v4
        with:
          name: module-src
          path: module
      - name: Restore headers
        uses: actions/download-artifact@v4
        with:
          name: headers-${{ matrix.device }}-${{ matrix.version }}
      - name: Build module
        run: |
          tar -xf headers.tar
          cd module/src
          make -j$(nproc) ARCH=mips CROSS_COMPILE=${{ matrix.toolchain }} KERNELDIR=$GITHUB_WORKSPACE/headers module
          ${{ matrix.toolchain }}strip --strip-debug wireguard.ko
      - name: Upload built module
        uses: actions/upload-artifact@v4
        with:
          name: module-${{ matrix.device }}-${{ matrix.version }}
          path: module/src/wireguard.ko

  tools:
    needs: docker
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/${{ github.repository_owner }}/ubnt-build:${{ matrix.arch }}-tools

    strategy:
      matrix:
        include:
          - arch: mips
            target: mips-linux-musl
          - arch: mipsel
            target: mipsel-linux-musl
    steps:
      - uses: actions/checkout@v2
      - name: Build tools
        env:
          TARGET: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}
        run: |
          apk add gnupg
          curl -L -o amneziawg-tools-$TOOLS_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-tools/archive/refs/tags/v$TOOLS_VERSION.tar.gz
          tar -xf amneziawg-tools-$TOOLS_VERSION.tar.gz
          mv amneziawg-tools-$TOOLS_VERSION tools
          cd tools/src
          CC="$ARCH-linux-musl-gcc" LDLIBS="-static" make -j$(nproc)
          $ARCH-linux-musl-strip --strip-unneeded wg
      - name: Upload built tools
        uses: actions/upload-artifact@v4
        with:
          name: tools-${{ matrix.arch }}
          path: tools/src/wg

  package:
    needs: [module, tools]
    runs-on: ubuntu-24.04
    container:
      image: debian

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        arch: [mips]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            arch: mipsel
          - device: e50
            version: 2
            arch: mipsel
    steps:
      - uses: actions/checkout@v2
      - name: Download module
        uses: actions/download-artifact@v4
        with:
          name: module-${{ matrix.device }}-${{ matrix.version }}
      - name: Download tools
        uses: actions/download-artifact@v4
        with:
          name: tools-${{ matrix.arch }}
      - name: Build package
        run: |
          apt update
          apt install -y kmod
          export KERNEL=$(modinfo -F vermagic wireguard.ko | cut -d ' ' -f 1)
          mkdir -p pkg/usr/bin pkg/lib/modules/$KERNEL/kernel/net
          cp -r debian pkg/DEBIAN
          cp -r opt pkg/opt
          cp wireguard.ko pkg/lib/modules/$KERNEL/kernel/net/wireguard.ko
          cp wg pkg/usr/bin/wg
          chmod +x pkg/usr/bin/wg
          sed -i "s/PACKAGE_VERSION/$MODULE_VERSION/g" pkg/DEBIAN/control
          sed -i "s/PACKAGE_RELEASE/$PACKAGE_RELEASE/g" pkg/DEBIAN/control
          sed -i "s/KERNEL_VER/$KERNEL/g" pkg/DEBIAN/preinst
          sed -i "s/PACKAGE_ARCH/${{ matrix.arch }}/g" pkg/DEBIAN/control
          dpkg-deb -b -Z gzip pkg
          mv pkg.deb ${{ matrix.device }}-v${{ matrix.version }}-v$MODULE_VERSION-v$TOOLS_VERSION.deb
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: release_${{ matrix.device }}-v${{ matrix.version }}
          path: ${{ matrix.device }}-v${{ matrix.version }}-v${{ env.MODULE_VERSION }}-v${{ env.TOOLS_VERSION }}.deb

  udm-prepare-buildroot:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v2
      - name: Download buildroot-2017.11.1
        run: |
          curl -o buildroot.tar.bz2 https://buildroot.org/downloads/buildroot-2017.11.1.tar.bz2
          tar -xf buildroot.tar.bz2
      - name: Download AmnesiaWG module source
        run: |
          curl -L -o amneziawg-linux-kernel-module-$MODULE_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-linux-kernel-module/archive/refs/tags/v$MODULE_VERSION.tar.gz
          tar -xf amneziawg-linux-kernel-module-$MODULE_VERSION.tar.gz
          tar -cf amneziawg-linux-kernel-module-$MODULE_VERSION.tar amneziawg-linux-kernel-module-$MODULE_VERSION/
      - name: Download AmnesiaWG tools source
        run: |
          curl -L -o amneziawg-tools-$TOOLS_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-tools/archive/refs/tags/v$TOOLS_VERSION.tar.gz
          tar -xf amneziawg-tools-$TOOLS_VERSION.tar.gz
          tar -cf amneziawg-tools-$TOOLS_VERSION.tar amneziawg-tools-$TOOLS_VERSION/
      - name: Copy packages
        run: cp -pr unifios/packages/* buildroot-2017.11.1/package
      - name: Copy AmnesiaWG source
        run: |
          cp amneziawg-linux-kernel-module-$MODULE_VERSION.tar buildroot-2017.11.1/package/wireguard-linux-compat/
          cp amneziawg-tools-$TOOLS_VERSION.tar buildroot-2017.11.1/package/wireguard-tools/
      - name: Set package versions
        run: |
          sed -i "s/PACKAGE_VERSION/$MODULE_VERSION/g" buildroot-2017.11.1/package/wireguard-linux-compat/wireguard-linux-compat.mk
          sed -i "s/PACKAGE_VERSION/$TOOLS_VERSION/g" buildroot-2017.11.1/package/wireguard-tools/wireguard-tools.mk
      - name: Patches
        run: |
          patch -p0 <unifios/patches/wireguard-packages.patch
          patch -p0 <unifios/patches/openresolv-package.patch
          patch -d buildroot-2017.11.1 -p1 <unifios/patches/add-kernel-4-19.patch
          cp unifios/patches/0001-m4-glibc-change-work-around.patch buildroot-2017.11.1/package/m4/
          cp unifios/patches/0002-m4-sigstksz-fix.patch buildroot-2017.11.1/package/m4/
          cp unifios/patches/0001-bison-glibc-change-work-around.patch buildroot-2017.11.1/package/bison/
          cp unifios/patches/944-mpc-relative-literal-loads-logic-in-aarch64_classify_symbol.patch buildroot-2017.11.1/package/gcc/6.4.0/
      - name: Initialize buildroot
        run: |
          cd buildroot-2017.11.1
          # Create the output directory structure that buildroot expects
          mkdir -p output
          # Create an empty .br-external.mk to bootstrap the build system
          echo "# Automatically generated file; DO NOT EDIT." > output/.br-external.mk
          echo "" >> output/.br-external.mk
          # Now try to initialize properly
          make defconfig
          # Apply DTC fix after kernel is downloaded during defconfig
          find . -name "dtc-lexer.l" -path "*/scripts/dtc/*" -exec grep -l "YYLTYPE yylloc;" {} \; | while read -r file; do
            echo "Applying DTC fix to $file"
            sed -i '/YYLTYPE yylloc;/d' "$file"
          done
          # Clean up the default config so individual jobs can use their own
          make clean
          rm -f .config
      - name: Generate artifacts
        run: tar -cf buildroot.tar buildroot-2017.11.1
      - name: Store headers
        uses: actions/upload-artifact@v4
        with:
          name: buildroot
          path: buildroot.tar
  udm-build-modules:
    needs: [udm-prepare-buildroot]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        base: [udm-1.9.0-10, udm-1.10.0-8, udm-1.10.0-12, udm-se-2.2.4, udr-2.2.12]
    steps:
      - uses: actions/checkout@v2
      - name: Restore buildroot
        uses: actions/download-artifact@v4
        with:
          name: buildroot
      - name: Extract buildroot
        run: tar -xf buildroot.tar
      - name: Build wireguard module
        run: |
          mkdir -p modules
          cp unifios/bases/${{ matrix.base }}/buildroot-config.txt buildroot-2017.11.1/.config
          cp unifios/bases/${{ matrix.base }}/kernel-config buildroot-2017.11.1/kernel-config
          versions="$(cat unifios/bases/${{ matrix.base }}/versions.txt)"
          prefix="$(cat unifios/bases/${{ matrix.base }}/prefix)"
          rm -rf ./buildroot-2017.11.1/linux-patches ./buildroot-2017.11.1/patches
          if [ -d "unifios/bases/${{ matrix.base }}/linux-patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/linux-patches" ./buildroot-2017.11.1/
          fi
          if [ -f "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz" ]; then
            tar -C ./buildroot-2017.11.1 -xf "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz"
          fi
          if [ -d "unifios/bases/${{ matrix.base }}/patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/patches" ./buildroot-2017.11.1/
          fi
          cd buildroot-2017.11.1
          make oldconfig
          (IFS=','
          for ver in $versions; do
            echo "Building version $ver"
            make wireguard-linux-compat-dirclean
            sed -i -e '/CONFIG_LOCALVERSION=/s/.*/CONFIG_LOCALVERSION="'$ver'"/' kernel-config
            make wireguard-linux-compat-rebuild -j$(nproc)
            cp output/build/wireguard-linux-compat-$MODULE_VERSION/src/wireguard.ko ../modules/wireguard-${prefix}${ver}.ko
            cp output/build/linux-custom/net/ipv4/netfilter/iptable_raw.ko ../modules/iptable_raw-${prefix}${ver}.ko
            cp output/build/linux-custom/net/ipv6/netfilter/ip6table_raw.ko ../modules/ip6table_raw-${prefix}${ver}.ko
          done)
      - name: Store modules
        uses: actions/upload-artifact@v4
        with:
          name: modules
          path: modules
  udm-build-tools:
    needs: [udm-prepare-buildroot]
    runs-on: ubuntu-24.04
    env:
      BASE: udm-1.9.0-10
    steps:
      - uses: actions/checkout@v2
      - name: Restore buildroot
        uses: actions/download-artifact@v4
        with:
          name: buildroot
      - name: Extract buildroot
        run: tar -xf buildroot.tar
      - name: Configure buildroot
        run: |
          cp unifios/bases/${{ env.BASE }}/buildroot-config.txt buildroot-2017.11.1/.config
          cp unifios/bases/${{ env.BASE }}/kernel-config buildroot-2017.11.1/kernel-config
          cd buildroot-2017.11.1
          make oldconfig
      - name: Build AmnesiaWG tools
        run: cd buildroot-2017.11.1 && make wireguard-tools-rebuild # -> output/target/usr/bin/wg
      - name: Build bash
        run: cd buildroot-2017.11.1 && make bash-rebuild # -> output/target/bin/bash
      - name: Build resolvconf
        run: cd buildroot-2017.11.1 && make openresolv-rebuild # -> output/target/sbin/resolvconf
      - name: Build qrencode
        run: cd buildroot-2017.11.1 && make libqrencode-rebuild # -> output/target/usr/bin/qrencode
      - name: Collect tools
        run: |
          mkdir -p tools
          cp buildroot-2017.11.1/output/target/usr/bin/wg tools/
          cp buildroot-2017.11.1/output/target/bin/bash tools/
          cp buildroot-2017.11.1/output/target/usr/bin/qrencode tools/
          cp buildroot-2017.11.1/output/target/sbin/resolvconf tools/
          cp buildroot-2017.11.1/output/target/etc/resolvconf.conf tools/
          cp buildroot-2017.11.1/output/build/wireguard-tools-$TOOLS_VERSION/src/wg-quick/linux.bash tools/wg-quick
      - name: Store tools
        uses: actions/upload-artifact@v4
        with:
          name: tools
          path: tools
  udm-package:
    needs: [udm-build-tools, udm-build-modules]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v2
      - name: Prepare
        run: mkdir -p package package/wireguard package/wireguard/modules package/wireguard/tools package/wireguard/etc
      - name: Restore modules
        uses: actions/download-artifact@v4
        with:
          name: modules
          path: package/wireguard/modules
      - name: Restore tools
        uses: actions/download-artifact@v4
        with:
          name: tools
          path: package/wireguard/tools
      - name: Add setup
        run: cp unifios/setup_wireguard.sh package/wireguard/
      - name: Fix permissions
        run: |
          mv package/wireguard/tools/resolvconf.conf package/wireguard/etc
          chmod +x package/wireguard/tools/* package/wireguard/setup_wireguard.sh
          sudo chown -R root:root package/wireguard
      - name: Package
        run: tar -C package -czf UnifiOS-$MODULE_VERSION-$TOOLS_VERSION.tar.gz ./
      - name: Store package
        uses: actions/upload-artifact@v4
        with:
          name: release_unifios
          path: UnifiOS-${{ env.MODULE_VERSION }}-${{ env.TOOLS_VERSION }}.tar.gz

  release:
    runs-on: ubuntu-24.04
    needs:
      - package
      - udm-package

    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: fossoreslp/release-artifacts@v1
        with:
          title: AmneziaWG ${{ env.MODULE_VERSION }} ${{ env.TOOLS_VERSION }}
          template: ci/release_body.md
          token: ${{ secrets.GITHUB_TOKEN }}
          variables: ${{ toJSON(env) }}