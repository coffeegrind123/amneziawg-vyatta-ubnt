name: Build kernel module and tools

on:
  push:
    branches:
      - "master"
  pull_request:
  workflow_dispatch:

env:
  MODULE_VERSION: "1.0.20241112"
  TOOLS_VERSION: "1.0.20250706"
  PACKAGE_RELEASE: "1"
  FIRMWARE_ER_v1: "v1.10.11"
  FIRMWARE_ER_v2: "v2.0.9"
  FIRMWARE_UGW: "4.4.50"

jobs:
  headers:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    container:
      image: ubuntu:24.04
      env:
        CROSS: ${{ matrix.toolchain }}
      options: --user root

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        toolchain: [mips64-octeon-linux-]
        image: [octeon-kernel]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            toolchain: mipsel-linux-gnu-
            image: mipsel-kernel
          - device: e50
            version: 2
            toolchain: mipsel-linux-gnu-
            image: mipsel-kernel

    steps:
      - uses: actions/checkout@v4
      
      - name: Cache toolchain
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/bin/mips*
            /usr/lib/gcc-cross/
          key: toolchain-${{ matrix.toolchain }}-${{ runner.os }}-v2
          
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y build-essential curl wget xz-utils ca-certificates jq patch bc cpio file python3
          
      - name: Setup toolchain and build headers
        run: |
          echo "=== STARTING COMPLETE WORKFLOW ==="
          echo "Device: ${{ matrix.device }}"
          echo "Toolchain: ${{ matrix.toolchain }}"
          echo "CROSS: $CROSS"
          
          # First, install the toolchain
          echo "=== INSTALLING TOOLCHAIN ==="
          if [ "${{ matrix.toolchain }}" = "mips64-octeon-linux-" ]; then
            apt-get install -y gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 binutils-mips64-linux-gnuabi64
            mkdir -p /usr/local/bin
            ln -sf /usr/bin/mips64-linux-gnuabi64-gcc /usr/local/bin/mips64-octeon-linux-gcc
            ln -sf /usr/bin/mips64-linux-gnuabi64-g++ /usr/local/bin/mips64-octeon-linux-g++
            ln -sf /usr/bin/mips64-linux-gnuabi64-ld /usr/local/bin/mips64-octeon-linux-ld
            ln -sf /usr/bin/mips64-linux-gnuabi64-ar /usr/local/bin/mips64-octeon-linux-ar
            ln -sf /usr/bin/mips64-linux-gnuabi64-strip /usr/local/bin/mips64-octeon-linux-strip
            ln -sf /usr/bin/mips64-linux-gnuabi64-objcopy /usr/local/bin/mips64-octeon-linux-objcopy
            ln -sf /usr/bin/mips64-linux-gnuabi64-objdump /usr/local/bin/mips64-octeon-linux-objdump
            ln -sf /usr/bin/mips64-linux-gnuabi64-nm /usr/local/bin/mips64-octeon-linux-nm
            ln -sf /usr/bin/mips64-linux-gnuabi64-ranlib /usr/local/bin/mips64-octeon-linux-ranlib
            export PATH="/usr/local/bin:$PATH"
            echo "Octeon toolchain installed and PATH updated"
          elif [ "${{ matrix.toolchain }}" = "mipsel-linux-gnu-" ]; then
            apt-get install -y gcc-mipsel-linux-gnu g++-mipsel-linux-gnu binutils-mipsel-linux-gnu
            echo "MIPSEL toolchain installed"
          fi
          
          # Verify toolchain works
          echo "=== VERIFYING TOOLCHAIN ==="
          echo "PATH: $PATH"
          which ${CROSS}gcc
          ${CROSS}gcc --version
          
          # Now do the build
          echo "=== BUILDING HEADERS ==="
          mkdir /headers
          
          # Get the source URL and determine file extension
          SOURCE_URL=$(jq -r '.["${{ matrix.device }}"]["${{ matrix.version }}"]' ci/ubnt-source.json)
          echo "Source URL: $SOURCE_URL"
          
          # Check if URL is valid (not null)
          if [ "$SOURCE_URL" = "null" ] || [ -z "$SOURCE_URL" ]; then
            echo "ERROR: No source URL found for device ${{ matrix.device }} version ${{ matrix.version }}"
            echo "Available combinations in ci/ubnt-source.json:"
            jq -r 'to_entries[] | "\(.key): versions \(.value | keys | join(", "))"' ci/ubnt-source.json
            exit 1
          fi
          
          # Determine file extension and download appropriately
          if [[ "$SOURCE_URL" == *.tbz2 ]]; then
            echo "Downloading .tbz2 file..."
            if ! curl -L -f -o src.tbz2 "$SOURCE_URL"; then
              echo "ERROR: Failed to download $SOURCE_URL"
              exit 1
            fi
            echo "Downloaded $(du -h src.tbz2 | cut -f1) file"
            echo "Extracting .tbz2 file..."
            tar -tf src.tbz2 | head -10 || echo "Could not list archive contents"
            tar -xf src.tbz2 --wildcards 'source/kernel_*' --strip-components 1 2>/dev/null || \
            tar -xf src.tbz2 --wildcards 'kernel_*' --strip-components 1 2>/dev/null || \
            tar -xf src.tbz2 --strip-components 1
          else
            echo "Downloading .tar.bz2 file..."
            if ! curl -L -f -o src.tar.bz2 "$SOURCE_URL"; then
              echo "ERROR: Failed to download $SOURCE_URL"
              exit 1
            fi
            echo "Downloaded $(du -h src.tar.bz2 | cut -f1) file"
            echo "Extracting .tar.bz2 file..."
            tar -tf src.tar.bz2 | head -10 || echo "Could not list archive contents"
            tar -xf src.tar.bz2 --wildcards 'source/kernel_*' --strip-components 1 2>/dev/null || \
            tar -xf src.tar.bz2 --wildcards 'kernel_*' --strip-components 1 2>/dev/null || \
            tar -xf src.tar.bz2 --strip-components 1
          fi
          
          # Find and extract kernel source
          echo "=== Files present after extraction ==="
          ls -la | head -10
          
          if ls kernel_* 1> /dev/null 2>&1; then
            echo "Found kernel archive(s): $(ls kernel_*)"
            mv kernel_* kernel.tar.gz
            echo "Extracting kernel source..."
            tar -xf kernel.tar.gz --strip-components 1
          else
            echo "Warning: No kernel_* archive found, assuming kernel source is already extracted"
          fi
          
          echo "=== Final directory structure ==="
          ls -la | head -10
          echo "Looking for Makefile..."
          if [ -f "Makefile" ]; then
            echo "✓ Makefile found"
            grep -E "^(VERSION|PATCHLEVEL|SUBLEVEL)" Makefile | head -3 || echo "No version info in Makefile"
          else
            echo "✗ Makefile not found"
          fi
          
          # Enhanced DTC compilation fix for newer flex/bison versions
          echo "=== APPLYING COMPREHENSIVE DTC FIX ==="
          
          # Set compiler flags for host compilation with enhanced error handling
          export HOSTCFLAGS="-fcommon -Wno-error"
          export HOSTCXXFLAGS="-fcommon -Wno-error"
          
          # Preemptively fix DTC issues before they occur
          echo "Pre-applying DTC fixes..."
          find . -name "dtc-lexer.lex.c" -exec sed -i '/^YYLTYPE yylloc;/d' {} \; 2>/dev/null || true
          find . -name "dtc-parser.tab.c" -exec sed -i 's/^YYLTYPE yylloc;/extern YYLTYPE yylloc;/' {} \; 2>/dev/null || true
          
          # Remove any pre-generated DTC files to force clean regeneration
          echo "Cleaning pre-generated DTC files..."
          rm -f scripts/dtc/dtc-lexer.lex.c scripts/dtc/dtc-parser.tab.c scripts/dtc/dtc-parser.tab.h 2>/dev/null || true
          
          # Patch DTC Maketo add -fcommon flag
          if [ -f scripts/dtc/Make]; then
            echo "Patching DTC Makefor yylloc fix..."
            if ! grep -q "fcommon" scripts/dtc/Makefile; then
              # Add -fcommon flags for DTC compilation
              sed -i '/HOSTCFLAGS_DTC.*:=/a # Fix yylloc multiple definition issue\nHOSTCFLAGS_dtc-lexer.lex.o := $(HOSTCFLAGS_DTC) -fcommon -Wno-error\nHOSTCFLAGS_dtc-parser.tab.o := $(HOSTCFLAGS_DTC) -fcommon -Wno-error' scripts/dtc/Makefile
              echo "DTC Makepatched successfully"
            else
              echo "DTC Makealready contains fcommon flags"
            fi
          fi
          
          # Create a function to apply post-generation fixes
          apply_dtc_post_fix() {
            if [ -f scripts/dtc/dtc-lexer.lex.c ]; then
              echo "Removing duplicate yylloc declarations from lexer..."
              sed -i '/^YYLTYPE yylloc;/d' scripts/dtc/dtc-lexer.lex.c
            fi
            
            if [ -f scripts/dtc/dtc-parser.tab.c ]; then
              echo "Making yylloc extern in parser..."
              sed -i 's/^YYLTYPE yylloc;/extern YYLTYPE yylloc;/' scripts/dtc/dtc-parser.tab.c
            fi
          }
          
          # Configure the kernel
          echo "=== CONFIGURING KERNEL ==="
          
          # Determine the correct defconfig based on device and version
          if [[ "${{ matrix.device }}" == "ugw"* ]]; then
            # UGW devices use different defconfig naming
            echo "Configuring for UGW device: ${{ matrix.device }}"
            # For UGW devices, try common defconfig names
            if [ -f "arch/mips/configs/ubnt_${{ matrix.device }}_defconfig" ]; then
              make ARCH=mips ubnt_${{ matrix.device }}_defconfig
            elif [ -f "arch/mips/configs/cavium_octeon_defconfig" ]; then
              make ARCH=mips cavium_octeon_defconfig
            elif [ -f "arch/mips/configs/octeon_defconfig" ]; then
              make ARCH=mips octeon_defconfig
            else
              echo "Using default MIPS config for UGW device"
              make ARCH=mips defconfig
            fi
          elif [ ${{ matrix.version }} -ne 1 ]; then 
            # EdgeRouter v2 devices
            echo "Configuring for EdgeRouter v2: ${{ matrix.device }}"
            make ARCH=mips ubnt_er_${{ matrix.device }}_defconfig
          else
            # EdgeRouter v1 devices - try to find appropriate defconfig
            echo "Configuring for EdgeRouter v1: ${{ matrix.device }}"
            if [ -f "arch/mips/configs/ubnt_er_${{ matrix.device }}_defconfig" ]; then
              make ARCH=mips ubnt_er_${{ matrix.device }}_defconfig
            elif [ -f "arch/mips/configs/cavium_octeon_defconfig" ]; then
              make ARCH=mips cavium_octeon_defconfig
            else
              echo "Using default MIPS config for EdgeRouter v1"
              make ARCH=mips defconfig
            fi
          fi
          
          # Calculate optimal parallel jobs (75% of available cores)
          NPROC=$(nproc)
          PARALLEL_JOBS=$((NPROC * 3 / 4))
          [ $PARALLEL_JOBS -lt 1 ] && PARALLEL_JOBS=1
          echo "Using $PARALLEL_JOBS parallel jobs (from $NPROC cores)"
          
          # First attempt at prepare - might generate DTC files
          echo "=== PREPARING KERNEL BUILD ==="
          make -j$PARALLEL_JOBS ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="$HOSTCFLAGS" prepare || {
            echo "First prepare failed, applying post-generation DTC fixes..."
            apply_dtc_post_fix
            echo "Retrying prepare after DTC fixes..."
            make -j$PARALLEL_JOBS ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="$HOSTCFLAGS" prepare
          }
          
          # Modules prepare
          echo "=== PREPARING MODULES ==="
          make -j$PARALLEL_JOBS ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="$HOSTCFLAGS" modules_prepare || {
            echo "Modules prepare failed, applying DTC fixes again..."
            apply_dtc_post_fix
            echo "Retrying modules_prepare after DTC fixes..."
            make -j$PARALLEL_JOBS ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="$HOSTCFLAGS" modules_prepare
          }
          
          # Build modules
          echo "=== BUILDING MODULES ==="
          make -j$PARALLEL_JOBS ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="$HOSTCFLAGS" modules || {
            echo "Modules build failed, applying final DTC fixes..."
            apply_dtc_post_fix
            echo "Retrying modules build after DTC fixes..."
            make -j$PARALLEL_JOBS ARCH=mips CROSS_COMPILE=$CROSS HOSTCFLAGS="$HOSTCFLAGS" modules
          }
          
          # Copy build artifacts
          cp Module.symvers .config /headers
          make mrproper
          
          # Build output headers with proper kernel build system
          make -j$PARALLEL_JOBS ARCH=mips O=/headers CROSS_COMPILE=$CROSS HOSTCFLAGS="$HOSTCFLAGS" prepare modules_prepare scripts
          rm -f /headers/source /headers/build 2>/dev/null || true
          
          # Create kernel source directory and symlinks for module building
          echo "Creating kernel source structure..."
          rm -rf /headers/source 2>/dev/null || true
          mkdir -p /headers/source
          
          # Copy kernel source files (avoid copying headers to prevent recursion)
          for item in *; do
            if [ "$item" != "headers" ] && [ -e "$item" ]; then
              cp -r "$item" /headers/source/ 2>/dev/null || true
            fi
          done
         
          # Create essential symlinks 
          cd /headers
          rm -f build 2>/dev/null || true
          ln -sf source build
          
          # Always create a proper kernel build Makefile for module compilation
          echo "Creating kernel module build Makefile..."
          # Get version info from source Makefile if available
          if [ -f "source/Makefile" ]; then
            VERSION=$(grep "^VERSION" source/Makefile 2>/dev/null | head -1 | cut -d'=' -f2 | tr -d ' ' || echo "3")
            PATCHLEVEL=$(grep "^PATCHLEVEL" source/Makefile 2>/dev/null | head -1 | cut -d'=' -f2 | tr -d ' ' || echo "10")
            SUBLEVEL=$(grep "^SUBLEVEL" source/Makefile 2>/dev/null | head -1 | cut -d'=' -f2 | tr -d ' ' || echo "107")
            EXTRAVERSION=$(grep "^EXTRAVERSION" source/Makefile 2>/dev/null | head -1 | cut -d'=' -f2 | tr -d ' ' || echo "")
            echo "Using version info from source Makefile: $VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION"
          else
            VERSION="3"
            PATCHLEVEL="10" 
            SUBLEVEL="107"
            EXTRAVERSION=""
            echo "Using default version info: $VERSION.$PATCHLEVEL.$SUBLEVEL"
          fi
          
          # Create Makefile with proper kernel module build support using printf to avoid YAML issues
          printf '# Kernel module build Makefile for WireGuard\n' > Makefile
          printf 'VERSION = %s\n' "$VERSION" >> Makefile
          printf 'PATCHLEVEL = %s\n' "$PATCHLEVEL" >> Makefile
          printf 'SUBLEVEL = %s\n' "$SUBLEVEL" >> Makefile
          printf 'EXTRAVERSION = %s\n' "$EXTRAVERSION" >> Makefile
          printf '\n' >> Makefile
          printf 'KERNELRELEASE = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)\n' >> Makefile
          printf '\n' >> Makefile
          printf '# Default architecture and cross-compiler (can be overridden)\n' >> Makefile
          printf 'ARCH ?= mips\n' >> Makefile
          printf 'CROSS_COMPILE ?= \n' >> Makefile
          printf '\n' >> Makefile
          printf '# Important build variables\n' >> Makefile
          printf 'export ARCH CROSS_COMPILE\n' >> Makefile
          printf 'export srctree := $(CURDIR)\n' >> Makefile
          printf 'export objtree := $(CURDIR)\n' >> Makefile
          printf 'export src := $(srctree)\n' >> Makefile
          printf 'export obj := $(objtree)\n' >> Makefile
          printf '\n' >> Makefile
          printf '# Kernel configuration\n' >> Makefile
          printf 'CONFIG_MODULES = y\n' >> Makefile
          printf 'CONFIG_MODULE_UNLOAD = y\n' >> Makefile
          printf 'export CONFIG_MODULES CONFIG_MODULE_UNLOAD\n' >> Makefile
          printf '\n' >> Makefile
          printf '# Default target\n' >> Makefile
          printf '.PHONY: all modules modules_prepare clean help\n' >> Makefile
          printf 'all: modules\n' >> Makefile
          printf '\n' >> Makefile
          printf '# Main modules target - the one that was missing\n' >> Makefile
          printf 'modules:\n' >> Makefile
          printf '\t@echo "Building kernel modules..."\n' >> Makefile
          printf '\t@echo "ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE)"\n' >> Makefile
          printf '\t@echo "KERNELRELEASE=$(KERNELRELEASE)"\n' >> Makefile
          printf '\t@if [ -f scripts/Makefile.build ]; then \\\n' >> Makefile
          printf '\t\t$(MAKE) -f $(srctree)/Makefile $(if $(M),M=$(M),) modules; \\\n' >> Makefile
          printf '\telse \\\n' >> Makefile
          printf '\t\techo "Using simplified module build..."; \\\n' >> Makefile
          printf '\t\tif [ -n "$(M)" ]; then \\\n' >> Makefile
          printf '\t\t\t$(MAKE) -C $(M) -f $(M)/Makefile KERNELDIR=$(CURDIR) modules_build; \\\n' >> Makefile
          printf '\t\telse \\\n' >> Makefile
          printf '\t\t\techo "No module directory specified (M= parameter required)"; \\\n' >> Makefile
          printf '\t\t\texit 1; \\\n' >> Makefile
          printf '\t\tfi; \\\n' >> Makefile
          printf '\tfi\n' >> Makefile
          printf '\n' >> Makefile
          printf 'modules_prepare:\n' >> Makefile
          printf '\t@echo "Module preparation completed"\n' >> Makefile
          printf '\n' >> Makefile
          printf 'modules_install:\n' >> Makefile
          printf '\t@echo "Module install not implemented"\n' >> Makefile
          printf '\n' >> Makefile
          printf 'clean:\n' >> Makefile
          printf '\t@find . -name "*.ko" -o -name "*.o" -o -name "*.mod.c" -o -name "*.mod.o" | xargs rm -f 2>/dev/null || true\n' >> Makefile
          printf '\t@rm -f modules.order Module.symvers 2>/dev/null || true\n' >> Makefile
          printf '\n' >> Makefile
          printf 'help:\n' >> Makefile
          printf '\t@echo "Available targets:"\n' >> Makefile
          printf '\t@echo "  all         - Build all modules (default)"\n' >> Makefile
          printf '\t@echo "  modules     - Build kernel modules"\n' >> Makefile
          printf '\t@echo "  clean       - Clean build artifacts"\n' >> Makefile
          printf '\t@echo "  help        - Show this help"\n' >> Makefile
          printf '\t@echo ""\n' >> Makefile
          printf '\t@echo "Usage: make modules M=/path/to/module/source ARCH=mips CROSS_COMPILE=toolchain-prefix-"\n' >> Makefile
          
          # Ensure essential directories are present in headers (they should be from the O= build)
          echo "Verifying essential kernel build files are present..."
          
          # The O= build should have already created scripts and include, just verify
          if [ ! -d "/headers/scripts" ]; then
            echo "Warning: scripts directory missing, copying from source"
            cp -a source/scripts "/headers/" 2>/dev/null || echo "Could not copy scripts directory"
          fi
          
          if [ ! -d "/headers/include" ]; then
            echo "Warning: include directory missing, copying from source"  
            cp -a source/include "/headers/" 2>/dev/null || echo "Could not copy include directory"
          fi
          
          echo "Essential kernel build environment ready"
          
          # Create the tar file in the workspace root for artifact upload
          cd "$GITHUB_WORKSPACE"
          tar -cf headers.tar /headers/
          
          echo "=== VERIFYING ARTIFACT LOCATION ==="
          echo "Current directory: $(pwd)"
          echo "Headers tar file: $(ls -lh headers.tar 2>/dev/null || echo 'NOT FOUND')"
          
          echo "=== HEADERS BUILD COMPLETED SUCCESSFULLY ==="
          
      - name: Enhanced error reporting
        if: failure()
        run: |
          echo "=== BUILD FAILURE ANALYSIS ==="
          echo "Available disk space:"
          df -h
          echo "Memory usage:"
          free -h
          echo "Build directory contents:"
          find . -name "*.log" -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || echo "No logs found"
          echo "DTC related files:"
          find . -name "*dtc*" -type f | head -10
          
      - name: Store headers
        uses: actions/upload-artifact@v4
        with:
          name: headers-${{ matrix.device }}-${{ matrix.version }}
          path: headers.tar

      - name: Debug headers output
        run: |
          echo "=== HEADERS DEBUG ==="
          ls -la /headers/
          find /headers -name "Makefile*" -o -name "*.symvers" -o -name ".config" | head -10
          if [ -f "/headers/Makefile" ]; then
            echo "Makefile found, checking version info:"
            grep -E "^(VERSION|PATCHLEVEL|SUBLEVEL)" /headers/Makefile || echo "No version info"
          fi
          echo "=== ARTIFACT VERIFICATION ==="
          echo "Current working directory: $(pwd)"
          if [ -f "headers.tar" ]; then
            echo "✓ headers.tar found: $(ls -lh headers.tar)"
          else
            echo "✗ headers.tar NOT found in $(pwd)"
            echo "Files in current directory:"
            ls -la
          fi

  module-prepare:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    container:
      image: ubuntu:24.04

    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl wget ca-certificates patch file
          
      - name: Download module source
        run: |
          # Download with retry logic
          for attempt in {1..3}; do
            if curl -L -o wireguard-linux-compat-$MODULE_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-linux-kernel-module/archive/refs/tags/v$MODULE_VERSION.tar.gz; then
              break
            fi
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          
          tar -xf wireguard-linux-compat-$MODULE_VERSION.tar.gz --one-top-level=module --strip-components=1
          cd module
          sed -i 's/ --dirty//g' src/Makefile
          patch -p1 < ../siphash_no_fallthrough.patch
          
          cd src
          if [ -f "../scripts/version.sh" ]; then
            ../scripts/version.sh > version.h
          fi
          
          mkdir -p generated
          
          if [ ! -f "generated/Makefile" ]; then
            echo "# Generated Makefor WireGuard module" > generated/Makefile
            echo "obj-m += wireguard.o" >> generated/Makefile
          fi
          
          echo "=== Module source structure ==="
          find . -name "Makefile*" -o -name "*.mk" | head -10
          ls -la .
          
      - name: Upload module source
        uses: actions/upload-artifact@v4
        with:
          name: module-src
          path: module

  module:
    needs: [module-prepare, headers]
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    container:
      image: ubuntu:24.04
      options: --user root

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        toolchain: [mips64-octeon-linux-]
        image: [octeon-kernel]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            toolchain: mipsel-mtk-linux-
            image: mtk-kernel
          - device: e50
            version: 2
            toolchain: mipsel-mtk-linux-
            image: mtk-kernel

    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies and setup toolchain
        run: |
          apt-get update
          apt-get install -y build-essential patch bc file python3
          
          # Install and setup cross-compilation toolchain  
          echo "Setting up toolchain: ${{ matrix.toolchain }}"
          
          if [ "${{ matrix.toolchain }}" = "mips64-octeon-linux-" ]; then
            apt-get install -y gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 binutils-mips64-linux-gnuabi64
            mkdir -p /usr/local/bin
            ln -sf /usr/bin/mips64-linux-gnuabi64-gcc /usr/local/bin/mips64-octeon-linux-gcc
            ln -sf /usr/bin/mips64-linux-gnuabi64-g++ /usr/local/bin/mips64-octeon-linux-g++
            ln -sf /usr/bin/mips64-linux-gnuabi64-ld /usr/local/bin/mips64-octeon-linux-ld
            ln -sf /usr/bin/mips64-linux-gnuabi64-ar /usr/local/bin/mips64-octeon-linux-ar
            ln -sf /usr/bin/mips64-linux-gnuabi64-strip /usr/local/bin/mips64-octeon-linux-strip
            ln -sf /usr/bin/mips64-linux-gnuabi64-objcopy /usr/local/bin/mips64-octeon-linux-objcopy
            ln -sf /usr/bin/mips64-linux-gnuabi64-objdump /usr/local/bin/mips64-octeon-linux-objdump
            ln -sf /usr/bin/mips64-linux-gnuabi64-nm /usr/local/bin/mips64-octeon-linux-nm
            ln -sf /usr/bin/mips64-linux-gnuabi64-ranlib /usr/local/bin/mips64-octeon-linux-ranlib
            export PATH="/usr/local/bin:$PATH"
            echo "/usr/local/bin" >> $GITHUB_PATH
          elif [ "${{ matrix.toolchain }}" = "mipsel-mtk-linux-" ]; then
            apt-get install -y gcc-mipsel-linux-gnu g++-mipsel-linux-gnu binutils-mipsel-linux-gnu
            mkdir -p /usr/local/bin
            ln -sf /usr/bin/mipsel-linux-gnu-gcc /usr/local/bin/mipsel-mtk-linux-gcc
            ln -sf /usr/bin/mipsel-linux-gnu-g++ /usr/local/bin/mipsel-mtk-linux-g++
            ln -sf /usr/bin/mipsel-linux-gnu-ld /usr/local/bin/mipsel-mtk-linux-ld
            ln -sf /usr/bin/mipsel-linux-gnu-ar /usr/local/bin/mipsel-mtk-linux-ar
            ln -sf /usr/bin/mipsel-linux-gnu-strip /usr/local/bin/mipsel-mtk-linux-strip
            ln -sf /usr/bin/mipsel-linux-gnu-objcopy /usr/local/bin/mipsel-mtk-linux-objcopy
            ln -sf /usr/bin/mipsel-linux-gnu-objdump /usr/local/bin/mipsel-mtk-linux-objdump
            ln -sf /usr/bin/mipsel-linux-gnu-nm /usr/local/bin/mipsel-mtk-linux-nm
            ln -sf /usr/bin/mipsel-linux-gnu-ranlib /usr/local/bin/mipsel-mtk-linux-ranlib
            export PATH="/usr/local/bin:$PATH"
            echo "/usr/local/bin" >> $GITHUB_PATH
          fi
          
          # Verify toolchain installation
          echo "=== Verifying toolchain installation ==="
          which ${{ matrix.toolchain }}gcc || echo "Compiler not found in PATH"
          ls -la /usr/local/bin/${{ matrix.toolchain }}* || echo "No toolchain files found"
          ${{ matrix.toolchain }}gcc --version || echo "Compiler version check failed"
          
      - name: Restore module source
        uses: actions/download-artifact@v4
        with:
          name: module-src
          path: module
          
      - name: Restore headers
        uses: actions/download-artifact@v4
        with:
          name: headers-${{ matrix.device }}-${{ matrix.version }}
          
      - name: Detect kernel version
        run: |
          tar -xf headers.tar
          # Enhanced kernel version detection
          KERNEL_VERSION=$(
            grep "^VERSION\|^PATCHLEVEL\|^SUBLEVEL" $GITHUB_WORKSPACE/headers/Make| 
            head -3 | cut -d'=' -f2 | tr -d ' ' | paste -sd '.' ||
            grep "LINUX_VERSION_CODE" $GITHUB_WORKSPACE/headers/include/generated/uapi/linux/version.h 2>/dev/null |
            awk '{print $3}' | python3 -c 'import sys; code=int(sys.stdin.read().strip()); print(f"{(code>>16)&0xFF}.{(code>>8)&0xFF}.{code&0xFF}")' || echo "3.10.107"
          )
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "Detected kernel version: $KERNEL_VERSION"
          
      - name: Apply AmnesiaWG compatibility fixes
        run: |
          export PATH="/usr/local/bin:$PATH"
          cd module/src
          
          echo "=== APPLYING AMNEZIAWG COMPATIBILITY FIXES FOR KERNEL $KERNEL_VERSION ==="
          
          # Create a backup of netlink.c before modifications
          cp netlink.c netlink.c.backup
          
          # 1. Fix get_random_u8() compatibility in netlink.c
          echo "Fixing get_random_u8() usage..."
          if grep -q "get_random_u8()" netlink.c; then
              sed -i 's/get_random_u8()/((u8)(get_random_u32() \& 0xFF))/g' netlink.c
              echo "✓ Fixed get_random_u8() calls"
          fi
          
          # 2. Add compatibility definitions to compat.h
          echo "Adding compatibility definitions..."
          if ! grep -q "get_random_u8" compat/compat.h; then
              printf '\n/* get_random_u8 compatibility for older kernels */\n' >> compat/compat.h
              printf '#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 4, 0)\n' >> compat/compat.h
              printf 'static inline u8 get_random_u8(void)\n' >> compat/compat.h
              printf '{\n' >> compat/compat.h
              printf '    u32 random_val = get_random_u32();\n' >> compat/compat.h
              printf '    return (u8)(random_val & 0xFF);\n' >> compat/compat.h
              printf '}\n' >> compat/compat.h
              printf '#endif\n' >> compat/compat.h
              echo "✓ Added get_random_u8 compatibility wrapper"
          fi
          
          # 3. COMPREHENSIVE NETLINK COMPATIBILITY FIXES
          echo "=== Applying comprehensive netlink.c fixes ==="
          
          # Create a Python script to safely fix the netlink.c preprocessor issues
          cat > fix_netlink.py << 'PYTHON_SCRIPT_END'
          #!/usr/bin/env python3
          import re
          import sys
          
          def fix_netlink_file(filename):
              """Fix preprocessor issues in netlink.c"""
              print(f"Processing {filename}...")
              
              with open(filename, 'r') as f:
                  content = f.read()
              
              lines = content.splitlines()
              fixed_lines = []
              
              # Track conditional compilation state
              if_stack = []
              in_genl_family = False
              
              i = 0
              while i < len(lines):
                  line = lines[i].rstrip()
                  
                  # Check for orphaned #else directives
                  if line.strip() == '#else':
                      # Look for context to determine if this #else is orphaned
                      if not if_stack:
                          print(f"Found orphaned #else at line {i+1}, commenting it out")
                          fixed_lines.append(f'// FIXED: removed orphaned #else (was line {i+1})')
                          i += 1
                          continue
                  
                  # Track #if/#endif pairs
                  if line.strip().startswith('#if'):
                      if_stack.append(i)
                  elif line.strip().startswith('#endif'):
                      if if_stack:
                          if_stack.pop()
                  elif line.strip().startswith('#else'):
                      if not if_stack:
                          # This is an orphaned #else
                          print(f"Orphaned #else found at line {i+1}")
                          fixed_lines.append(f'// FIXED: removed orphaned #else (was line {i+1})')
                          i += 1
                          continue
                  
                  # Handle genl_family structure modifications more carefully
                  if '.mcgrps = wg_genl_mcgrps,' in line:
                      in_genl_family = True
                      # Add proper conditional compilation
                      fixed_lines.append('#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 13, 0)')
                      fixed_lines.append(line)
                  elif in_genl_family and '.n_mcgrps = ARRAY_SIZE(wg_genl_mcgrps)' in line:
                      fixed_lines.append(line)
                      fixed_lines.append('#else')
                      fixed_lines.append('\t/* .mcgrps and .n_mcgrps not available in older kernels */')
                      fixed_lines.append('#endif')
                      in_genl_family = False
                  else:
                      fixed_lines.append(line)
                  
                  i += 1
              
              # Write the fixed content
              with open(filename, 'w') as f:
                  f.write('\n'.join(fixed_lines) + '\n')
              
              print(f"✓ Fixed {filename}")
              return True
          
          if __name__ == "__main__":
              fix_netlink_file("netlink.c")
          PYTHON_SCRIPT_END
          
          # Run the Python fix script
          python3 fix_netlink.py
          
          # 4. Apply additional fixes for multicast registration
          echo "Fixing multicast registration..."
          
          # Fix registration function with proper conditional compilation
          if grep -q "ret = genl_register_family(&genl_family);" netlink.c; then
              # Create a proper patch for registration
              cat > registration_fix.patch << 'PATCH_END'
          	ret = genl_register_family(&genl_family);
          #if LINUX_VERSION_CODE < KERNEL_VERSION(3, 13, 0)
          	if (ret < 0)
          		return ret;
          	/* Register multicast groups separately for older kernels */
          	ret = genl_register_mc_group(&genl_family, &wg_genl_mcgrps[0]);
          	if (ret < 0) {
          		genl_unregister_family(&genl_family);
          		return ret;
          	}
          #endif
          PATCH_END
              
              # Apply the patch after the registration line
              sed -i '/ret = genl_register_family(&genl_family);/r registration_fix.patch' netlink.c
              rm registration_fix.patch
              echo "✓ Fixed registration function"
          fi
          
          # Fix multicast function call with proper conditional compilation
          if grep -q "genlmsg_multicast_netns(&genl_family" netlink.c; then
              # Replace the multicast call with conditional version
              sed -i '/ret = genlmsg_multicast_netns(&genl_family, dev_net(wg->dev), skb, 0, 0, GFP_KERNEL);/c\
          #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 13, 0)\
          	ret = genlmsg_multicast_netns(&genl_family, dev_net(wg->dev), skb, 0, 0, GFP_KERNEL);\
          #else\
          	ret = genlmsg_multicast_netns(dev_net(wg->dev), skb, 0, wg_genl_mcgrps[0].id, GFP_KERNEL);\
          #endif' netlink.c
              echo "✓ Fixed multicast function"
          fi
          
          # 5. Final validation - check for preprocessor syntax errors
          echo "=== Validating preprocessor syntax ==="
          
          # Count #if, #else, #endif to ensure they're balanced
          python3 << 'VALIDATION_SCRIPT'
          with open('netlink.c', 'r') as f:
              content = f.read()
          
          lines = content.splitlines()
          if_count = 0
          else_count = 0
          endif_count = 0
          orphaned_else = []
          
          stack = []
          for i, line in enumerate(lines):
              stripped = line.strip()
              if stripped.startswith('#if'):
                  if_count += 1
                  stack.append(('if', i+1))
              elif stripped == '#else':
                  else_count += 1
                  if not stack or stack[-1][0] != 'if':
                      orphaned_else.append(i+1)
                  else:
                      stack[-1] = ('else', i+1)
              elif stripped.startswith('#endif'):
                  endif_count += 1
                  if stack:
                      stack.pop()
          
          print(f"Preprocessor directive counts:")
          print(f"  #if variants: {if_count}")
          print(f"  #else: {else_count}")
          print(f"  #endif: {endif_count}")
          
          if orphaned_else:
              print(f"⚠ Found orphaned #else directives at lines: {orphaned_else}")
              sys.exit(1)
          
          if stack:
              print(f"⚠ Unmatched directives: {stack}")
              sys.exit(1)
          
          print("✓ Preprocessor directives are properly balanced")
          VALIDATION_SCRIPT
          
          # 6. Adjust compiler flags to suppress warnings that become errors
          echo "Adjusting compiler flags..."
          if [ -f "Makefile" ]; then
              # Add flags to suppress specific warnings that become errors
              if ! grep -q "Wno-address" Makefile; then
                  sed -i '/^ccflags-y/s/$/ -Wno-address -Wno-array-bounds -Wno-missing-attributes -Wno-stringop-overread/' Makefile
                  echo "✓ Added warning suppression flags"
              fi
          fi
          
          echo "=== COMPATIBILITY FIXES COMPLETED SUCCESSFULLY ==="
          
      - name: Build module
        run: |
          export PATH="/usr/local/bin:$PATH"
          
          # Verify toolchain is available before building
          echo "=== Verifying toolchain availability ==="
          which ${{ matrix.toolchain }}gcc || echo "ERROR: Compiler not found in PATH"
          ${{ matrix.toolchain }}gcc --version || echo "ERROR: Compiler version check failed"
          
          cd module/src
          
          echo "=== Current module/src structure ==="
          ls -la
          
          echo "=== Looking for Makefiles ==="
          find . -name "Makefile*" -o -name "*.mk" | head -10
          
          if [ -f "Makefile" ]; then
            echo "=== Main Makecontent (first 20 lines) ==="
            head -20 Makefile
          fi
          
          echo "=== Target kernel version: $KERNEL_VERSION ==="
          
          # Set build variables for compatibility
          export KERNELDIR="$GITHUB_WORKSPACE/headers"
          export KERNEL_SRC="$GITHUB_WORKSPACE/headers/source"
          export KERNELRELEASE="$KERNEL_VERSION"
          export CROSS_COMPILE="${{ matrix.toolchain }}"
          export ARCH="mips"
          
          # Verify kernel source directory exists and is properly configured
          if [ ! -d "$KERNEL_SRC" ]; then
            echo "Warning: Kernel source not found at $KERNEL_SRC, using headers dir"
            export KERNEL_SRC="$KERNELDIR"
          fi
          
          echo "=== Kernel build environment verification ==="
          echo "KERNELDIR: $KERNELDIR"
          echo "KERNEL_SRC: $KERNEL_SRC"
          echo "Checking headers directory:"
          ls -la "$KERNELDIR" | head -10
          echo "Checking if source Makefile exists:"
          if [ -f "$KERNEL_SRC/Makefile" ]; then
            echo "✓ Source Makefile found"
            grep -E "^(VERSION|PATCHLEVEL|SUBLEVEL)" "$KERNEL_SRC/Makefile" | head -3 || echo "No version info in Makefile"
          else
            echo "⚠ Source Makefile not found at $KERNEL_SRC/Makefile"
          fi
          echo "Checking for scripts directory:"
          ls -la "$KERNEL_SRC/scripts" | head -5 || echo "No scripts directory found"
          
          # Force disable WERROR and add compatibility flags
          export KCFLAGS="-Wno-error -Wno-address -Wno-array-bounds -Wno-missing-attributes -Wno-stringop-overread"
          export EXTRA_CFLAGS="$KCFLAGS"
          
          # Calculate optimal parallel jobs
          NPROC=$(nproc)
          PARALLEL_JOBS=$((NPROC * 3 / 4))
          [ $PARALLEL_JOBS -lt 1 ] && PARALLEL_JOBS=1
          
          echo "=== Starting module build with compatibility mode ==="
          echo "Kernel directory: $KERNELDIR"
          echo "Cross compiler: $CROSS_COMPILE"
          echo "Architecture: $ARCH"
          echo "Kernel release: $KERNELRELEASE"
          echo "Parallel jobs: $PARALLEL_JOBS"
          
          # Try multiple build approaches
          BUILD_SUCCESS=0
          
          # Method 1: Direct kernel build using proper source
          echo "=== Attempting direct kernel build ==="
          if make -C "$KERNEL_SRC" M="$(pwd)" ARCH="$ARCH" CROSS_COMPILE="$CROSS_COMPILE" \
              EXTRA_CFLAGS="$KCFLAGS" V=1 -j$PARALLEL_JOBS modules 2>&1; then
              echo "✓ Direct kernel build successful"
              BUILD_SUCCESS=1
          else
              echo "Direct kernel build failed, trying method 2..."
              
              # Method 2: Module-specific Makefile
              echo "=== Attempting module-specific build ==="
              if make KERNELDIR="$KERNEL_SRC" ARCH="$ARCH" CROSS_COMPILE="$CROSS_COMPILE" \
                  KERNELRELEASE="$KERNELRELEASE" V=1 -j$PARALLEL_JOBS module 2>&1; then
                  echo "✓ Module-specific build successful"
                  BUILD_SUCCESS=1
              else
                  echo "Module-specific build failed, trying method 3..."
                  
                  # Method 3: Use headers directory if source fails
                  echo "=== Attempting build with headers directory ==="
                  if make -C "$KERNELDIR" M="$(pwd)" ARCH="$ARCH" CROSS_COMPILE="$CROSS_COMPILE" \
                      EXTRA_CFLAGS="$KCFLAGS" V=1 -j$PARALLEL_JOBS modules 2>&1; then
                      echo "✓ Headers directory build successful"
                      BUILD_SUCCESS=1
                  else
                      echo "Headers build failed, trying method 4..."
                      
                      # Method 4: Force compatibility with custom build
                      echo "=== Attempting forced compatibility build ==="
                      # Create a simplified Kbuild file
                      echo "obj-m := amneziawg.o" > Kbuild.simple
                      echo "amneziawg-y := main.o noise.o device.o peer.o timers.o queueing.o send.o receive.o socket.o peerlookup.o allowedips.o ratelimiter.o cookie.o netlink.o" >> Kbuild.simple
                      echo "amneziawg-y += crypto/zinc/chacha20/chacha20.o" >> Kbuild.simple
                      echo "amneziawg-y += crypto/zinc/poly1305/poly1305.o" >> Kbuild.simple
                      echo "amneziawg-y += crypto/zinc/chacha20poly1305/chacha20poly1305.o" >> Kbuild.simple
                      echo "amneziawg-y += crypto/zinc/blake2s/blake2s.o" >> Kbuild.simple
                      echo "amneziawg-y += crypto/zinc/curve25519/curve25519.o" >> Kbuild.simple
                      
                      # Try with simplified build
                      if make -C "$KERNEL_SRC" M="$(pwd)" ARCH="$ARCH" CROSS_COMPILE="$CROSS_COMPILE" \
                          KBUILD_EXTMOD="$(pwd)" EXTRA_CFLAGS="$KCFLAGS" V=1 -j$PARALLEL_JOBS -f Kbuild.simple 2>&1; then
                          echo "✓ Forced compatibility build successful"
                          BUILD_SUCCESS=1
                      fi
                  fi
              fi
          fi
          
          # Check for successful build
          if [ $BUILD_SUCCESS -eq 1 ] || [ -f "amneziawg.ko" ] || [ -f "wireguard.ko" ]; then
              # Find the built module
              MODULE_FILE=""
              if [ -f "amneziawg.ko" ]; then
                  MODULE_FILE="amneziawg.ko"
                  mv amneziawg.ko wireguard.ko
              elif [ -f "wireguard.ko" ]; then
                  MODULE_FILE="wireguard.ko"
              elif [ -f "generated/wireguard.ko" ]; then
                  mv generated/wireguard.ko .
                  MODULE_FILE="wireguard.ko"
              fi
              
              if [ -n "$MODULE_FILE" ]; then
                  ${{ matrix.toolchain }}strip --strip-debug wireguard.ko
                  echo "=== Module built successfully ==="
                  ls -la wireguard.ko
                  
                  # Verify the module
                  wireguard.ko
                  echo "Module info:"
                  ${{ matrix.toolchain }}objdump -h wireguard.ko | head -10 || echo "Could not analyze module"
              else
                  echo "=== ERROR: No module found after build ==="
                  exit 1
              fi
          else
              echo "=== ALL BUILD METHODS FAILED ==="
              exit 1
          fi
          
      - name: Validate built module
        run: |
          cd module/src
          echo "=== MODULE VALIDATION ==="
          if [ -f "wireguard.ko" ]; then
            # Basic checks
            echo "Module size: $(stat -c%s wireguard.ko) bytes"
            echo "Module type: $(wireguard.ko)"
            
            # Check for required symbols
            if ${{ matrix.toolchain }}nm wireguard.ko | grep -q "init_module\|cleanup_module"; then
              echo "✓ Required module symbols found"
            else
              echo "⚠ Warning: Standard module symbols not found"
            fi
          else
            echo "❌ Module not found!"
            exit 1
          fi
          
      - name: Enhanced error reporting
        if: failure()
        run: |
          echo "=== MODULE BUILD FAILURE ANALYSIS ==="
          echo "Available disk space:"
          df -h
          echo "Memory usage:"
          free -h
          echo "Build directory contents:"
          find module/src -name "*.log" -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || echo "No logs found"
          echo "Generated files:"
          find module/src -name "*.ko" -o -name "*.o" | head -20
          echo "Kernel headers check:"
          ls -la headers/ | head -10
          echo "Netlink.c backup comparison:"
          if [ -f "module/src/netlink.c.backup" ]; then
            echo "=== Showing netlink.c changes ==="
            diff -u module/src/netlink.c.backup module/src/netlink.c | head -50 || echo "Files are identical or diff failed"
          fi
          
      - name: Upload built module
        uses: actions/upload-artifact@v4
        with:
          name: module-${{ matrix.device }}-${{ matrix.version }}
          path: module/src/wireguard.ko

  tools:
    runs-on: ubuntu-24.04
    timeout-minutes: 60

    strategy:
      matrix:
        include:
          - arch: mips
            target: mips-linux-musl
          - arch: mipsel
            target: mipsel-linux-musl
            
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup cross-compilation environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential xz-utils file
          
          # Use system cross-compilation packages instead of musl.cc
          ARCH="${{ matrix.arch }}"
          
          if [ "$ARCH" = "mips" ]; then
            sudo apt-get install -y gcc-mips-linux-gnu
            TOOLCHAIN_PREFIX="mips-linux-gnu"
          else
            sudo apt-get install -y gcc-mipsel-linux-gnu
            TOOLCHAIN_PREFIX="mipsel-linux-gnu"
          fi
          
          echo "TOOLCHAIN_PREFIX=${TOOLCHAIN_PREFIX}" >> $GITHUB_ENV
          echo "TOOLCHAIN_DIR=/usr" >> $GITHUB_ENV
          
      - name: Verify cross-compilation setup
        run: |
          echo "Checking cross-compiler:"
          which ${TOOLCHAIN_PREFIX}-gcc || echo "Compiler not found in PATH"
          ${TOOLCHAIN_PREFIX}-gcc --version || echo "Compiler execution failed"
          
      - name: Build tools
        env:
          TARGET: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}
        run: |
          # Download with retry logic
          for attempt in {1..3}; do
            if curl -L -o wireguard-tools-$TOOLS_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-tools/archive/refs/tags/v$TOOLS_VERSION.tar.gz; then
              break
            fi
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          
          tar -xf wireguard-tools-$TOOLS_VERSION.tar.gz
          
          # Check what directory was actually created
          echo "=== Extracted contents ==="
          ls -la
          
          # Find the actual directory name (it might be amneziawg-tools-$TOOLS_VERSION)
          ACTUAL_DIR=$(find . -maxdepth 1 -type d -name "*tools*" | head -1)
          if [ -z "$ACTUAL_DIR" ]; then
            echo "ERROR: Could not find extracted tools directory"
            ls -la
            exit 1
          fi
          
          echo "Found tools directory: $ACTUAL_DIR"
          mv "$ACTUAL_DIR" tools
          
          cd tools/src
          # Use system cross-compiler with static linking
          CC="${TOOLCHAIN_PREFIX}-gcc" LDFLAGS="-static" make -j$(nproc)
          ${TOOLCHAIN_PREFIX}-strip --strip-unneeded wg
          
      - name: Validate built tools
        run: |
          cd tools/src
          echo "=== TOOLS VALIDATION ==="
          if [ -f "wg" ]; then
            echo "Tool size: $(stat -c%s wg) bytes"
            echo "Tool type: $(file wg)"
            echo "✓ wg tool built successfully"
          else
            echo "❌ wg tool not found!"
            exit 1
          fi
          
      - name: Upload built tools
        uses: actions/upload-artifact@v4
        with:
          name: tools-${{ matrix.arch }}
          path: tools/src/wg

  package:
    needs: [module, tools]
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    container:
      image: ubuntu:24.04

    strategy:
      matrix:
        device: [e100, e200, e300, e1000, ugw3, ugw4, ugwxg]
        version: [1, 2]
        arch: [mips]
        exclude:
          - device: ugw3
            version: 2
          - device: ugw4
            version: 2
          - device: ugwxg
            version: 2
        include:
          - device: e50
            version: 1
            arch: mipsel
          - device: e50
            version: 2
            arch: mipsel
            
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y kmod dpkg-deb file
          
      - name: Download module
        uses: actions/download-artifact@v4
        with:
          name: module-${{ matrix.device }}-${{ matrix.version }}
          
      - name: Download tools
        uses: actions/download-artifact@v4
        with:
          name: tools-${{ matrix.arch }}
          
      - name: Build package
        run: |
          export KERNEL=$(modinfo -F vermagic wireguard.ko | cut -d ' ' -f 1)
          mkdir -p pkg/usr/bin pkg/lib/modules/$KERNEL/kernel/net
          cp -r debian pkg/DEBIAN
          cp -r opt pkg/opt
          cp wireguard.ko pkg/lib/modules/$KERNEL/kernel/net/wireguard.ko
          cp wg pkg/usr/bin/wg
          chmod +x pkg/usr/bin/wg
          sed -i "s/PACKAGE_VERSION/$MODULE_VERSION/g" pkg/DEBIAN/control
          sed -i "s/PACKAGE_RELEASE/$PACKAGE_RELEASE/g" pkg/DEBIAN/control
          sed -i "s/KERNEL_VER/$KERNEL/g" pkg/DEBIAN/preinst
          sed -i "s/PACKAGE_ARCH/${{ matrix.arch }}/g" pkg/DEBIAN/control
          dpkg-deb -b -Z gzip pkg
          mv pkg.deb ${{ matrix.device }}-v${{ matrix.version }}-v$MODULE_VERSION-v$TOOLS_VERSION.deb
          
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: release_${{ matrix.device }}-v${{ matrix.version }}
          path: ${{ matrix.device }}-v${{ matrix.version }}-v${{ env.MODULE_VERSION }}-v${{ env.TOOLS_VERSION }}.deb

  udm-prepare-buildroot:
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache buildroot
        uses: actions/cache@v4
        with:
          path: buildroot-2017.11.1
          key: buildroot-2017.11.1-${{ hashFiles('unifios/patches/*') }}-v5
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            m4 \
            autoconf \
            automake \
            libtool \
            pkg-config \
            kmod \
            lzip \
            ccache \
            bison \
            flex \
            gettext \
            libncurses5-dev \
            rsync \
            unzip \
            bc \
            wget \
            cpio \
            curl \
            ca-certificates \
            patch \
            file \
            python3
            
      - name: Download buildroot-2017.11.1
        run: |
          if [ ! -f "buildroot.tar.bz2" ]; then
            curl -o buildroot.tar.bz2 https://buildroot.org/downloads/buildroot-2017.11.1.tar.bz2
            tar -xf buildroot.tar.bz2
          fi
          
      - name: Download WireGuard module source
        run: |
          # Download with retry logic
          for attempt in {1..3}; do
            if curl -L -o wireguard-linux-compat-$MODULE_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-linux-kernel-module/archive/refs/tags/v$MODULE_VERSION.tar.gz; then
              break
            fi
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          gunzip wireguard-linux-compat-$MODULE_VERSION.tar.gz
          
      - name: Download WireGuard tools source
        run: |
          # Download with retry logic
          for attempt in {1..3}; do
            if curl -L -o wireguard-tools-$TOOLS_VERSION.tar.gz https://github.com/amnezia-vpn/amneziawg-tools/archive/refs/tags/v$TOOLS_VERSION.tar.gz; then
              break
            fi
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          gunzip wireguard-tools-$TOOLS_VERSION.tar.gz
          
      - name: Copy packages
        run: cp -pr unifios/packages/* buildroot-2017.11.1/package
        
      - name: Copy WireGuard source
        run: |
          cp wireguard-linux-compat-$MODULE_VERSION.tar buildroot-2017.11.1/package/wireguard-linux-compat/
          cp wireguard-tools-$TOOLS_VERSION.tar buildroot-2017.11.1/package/wireguard-tools/
          
      - name: Set package versions
        run: |
          sed -i "s/PACKAGE_VERSION/$MODULE_VERSION/g" buildroot-2017.11.1/package/wireguard-linux-compat/wireguard-linux-compat.mk
          sed -i "s/PACKAGE_VERSION/$TOOLS_VERSION/g" buildroot-2017.11.1/package/wireguard-tools/wireguard-tools.mk
          
      - name: Apply patches
        run: |
          patch -p0 <unifios/patches/wireguard-packages.patch
          patch -p0 <unifios/patches/openresolv-package.patch
          patch -d buildroot-2017.11.1 -p1 <unifios/patches/add-kernel-4-19.patch
          cp unifios/patches/0001-m4-glibc-change-work-around.patch buildroot-2017.11.1/package/m4
          cp unifios/patches/0001-bison-glibc-change-work-around.patch buildroot-2017.11.1/package/bison
          cp unifios/patches/944-mpc-relative-literal-loads-logic-in-aarch64_classify_symbol.patch buildroot-2017.11.1/package/gcc/6.4.0
          
      - name: Fix M4 SIGSTKSZ compatibility issue
        run: |
          cd buildroot-2017.11.1
          
          echo "=== Applying comprehensive M4 SIGSTKSZ fix ==="
          
          # Remove any existing problematic patches
          rm -f package/m4/0002-fix-sigstksz-glibc-compatibility.patch
          
          # Create a proper source patch for M4 that fixes the SIGSTKSZ issue
          mkdir -p package/m4/patches
          cat > package/m4/patches/0001-fix-sigstksz-glibc-compatibility.patch << 'PATCH_EOF'
--- a/lib/c-stack.c.orig	2024-01-01 00:00:00.000000000 +0000
+++ b/lib/c-stack.c	2024-01-01 00:00:00.000000000 +0000
@@ -50,7 +50,13 @@
 #if ! HAVE_STACK_T && ! defined stack_t
 typedef struct sigaltstack stack_t;
 #endif
-#elif HAVE_LIBSIGSEGV && SIGSTKSZ < 16384
+
+/* Fix for glibc 2.34+ where SIGSTKSZ is no longer a compile-time constant */
+#ifndef SIGSTKSZ
+# define SIGSTKSZ 16384
+#endif
+
+#elif HAVE_LIBSIGSEGV && (SIGSTKSZ < 16384 || !__builtin_constant_p(SIGSTKSZ))
 
 # include <sigsegv.h>
 
PATCH_EOF
          
          # Update the M4 makefile to include our patch and set proper build flags
          if [ -f "package/m4/m4.mk" ]; then
            echo "Updating M4 makefile with SIGSTKSZ fixes..."
            
            # Add our patch to the patch list if not already there
            if ! grep -q "0001-fix-sigstksz-glibc-compatibility.patch" package/m4/m4.mk; then
              # Find the line with M4_SOURCE and add our patch after any existing patches
              if grep -q "define M4_EXTRACT_CMDS" package/m4/m4.mk; then
                # Buildroot 2017 style - patches are applied automatically from patches/ directory
                echo "✓ Patch will be auto-applied from patches/ directory"
              else
                # Add patch manually if needed
                sed -i '/^M4_VERSION/a M4_PATCH = 0001-fix-sigstksz-glibc-compatibility.patch' package/m4/m4.mk
              fi
            fi
            
            # Set environment variables for the build
            if ! grep -q "M4_CONF_ENV.*SIGSTKSZ" package/m4/m4.mk; then
              # Method 1: Add CPPFLAGS with SIGSTKSZ definition
              cat >> package/m4/m4.mk << 'MAKEFILE_EOF'

# SIGSTKSZ compatibility fix for glibc 2.34+
M4_CONF_ENV += CPPFLAGS="$(HOST_CPPFLAGS) -DSIGSTKSZ=16384"
M4_CONF_ENV += CFLAGS="$(HOST_CFLAGS) -fcommon -Wno-error"
M4_MAKE_ENV += CPPFLAGS="$(HOST_CPPFLAGS) -DSIGSTKSZ=16384"
M4_MAKE_ENV += CFLAGS="$(HOST_CFLAGS) -fcommon -Wno-error"
MAKEFILE_EOF
              echo "✓ Added SIGSTKSZ build environment variables"
            fi
          else
            echo "⚠ M4 makefile not found at package/m4/m4.mk"
            ls -la package/m4/ || echo "M4 package directory not found"
          fi
          
          # Alternative approach: Create a wrapper script that sets the environment
          cat > package/m4/sigstksz-wrapper.sh << 'WRAPPER_EOF'
#!/bin/bash
# SIGSTKSZ compatibility wrapper for M4 build
export CPPFLAGS="${CPPFLAGS} -DSIGSTKSZ=16384"
export CFLAGS="${CFLAGS} -fcommon -Wno-error"
exec "$@"
WRAPPER_EOF
          chmod +x package/m4/sigstksz-wrapper.sh
          
          echo "=== M4 SIGSTKSZ compatibility fixes applied ==="
          echo "Applied fixes:"
          echo "  1. Source patch for c-stack.c"
          echo "  2. Build environment variables"
          echo "  3. Wrapper script as fallback"
          
      - name: Initialize buildroot
        run: |
          cd buildroot-2017.11.1
          # Create output directory structure first
          mkdir -p output
          # Create a proper .br-external.mk file for buildroot 2017.11.1
          echo "# This file is automatically generated by buildroot" > output/.br-external.mk
          echo "# DO NOT EDIT" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of directories containing external packages" >> output/.br-external.mk
          echo "BR2_EXTERNAL :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external packages" >> output/.br-external.mk
          echo "BR2_EXTERNAL_NAMES :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external makefiles" >> output/.br-external.mk
          echo "BR2_EXTERNAL_MKS :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external package descriptions" >> output/.br-external.mk
          echo "BR2_EXTERNAL_DESCS :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          echo "# List of external package dependencies" >> output/.br-external.mk
          echo "BR2_EXTERNAL_DEPS :=" >> output/.br-external.mk
          echo "" >> output/.br-external.mk
          # Initialize with defconfig to create basic structure
          make defconfig
          # Ensure output structure exists
          mkdir -p output/build output/target output/host output/staging
          
      - name: Generate artifacts
        run: tar -cf buildroot.tar buildroot-2017.11.1
        
      - name: Store buildroot
        uses: actions/upload-artifact@v4
        with:
          name: buildroot
          path: buildroot.tar

  udm-build-modules:
    needs: [udm-prepare-buildroot]
    runs-on: ubuntu-24.04
    timeout-minutes: 180
    
    strategy:
      matrix:
        base: [udm-1.9.0-10, udm-1.10.0-8, udm-1.10.0-12, udm-se-2.2.4, udr-2.2.12]
      fail-fast: false
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            m4 \
            autoconf \
            automake \
            libtool \
            pkg-config \
            kmod \
            lzip \
            ccache \
            bison \
            flex \
            gettext \
            libncurses5-dev \
            rsync \
            unzip \
            bc \
            wget \
            cpio \
            curl \
            ca-certificates \
            patch \
            file \
            python3
            
      - name: Restore buildroot
        uses: actions/download-artifact@v4
        with:
          name: buildroot
          
      - name: Extract buildroot
        run: tar -xf buildroot.tar
        
      - name: Debug buildroot state
        run: |
          echo "Buildroot directory contents:"
          ls -la buildroot-2017.11.1/
          echo "Checking for config files:"
          ls -la unifios/bases/${{ matrix.base }}/ || echo "Base config directory not found"
          echo "Checking versions file:"
          cat unifios/bases/${{ matrix.base }}/versions.txt || echo "Versions file not found"
          
      - name: Configure buildroot
        run: |
          cd buildroot-2017.11.1
          
          # Ensure output directory structure exists
          mkdir -p output/build output/target output/host output/staging
          
          # Recreate the .br-external.mk file if it doesn't exist
          if [ ! -f "output/.br-external.mk" ]; then
            echo "# This file is automatically generated by buildroot" > output/.br-external.mk
            echo "# DO NOT EDIT" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of directories containing external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL_NAMES :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external makefiles" >> output/.br-external.mk
            echo "BR2_EXTERNAL_MKS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package descriptions" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DESCS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package dependencies" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DEPS :=" >> output/.br-external.mk
          fi
          
          # Copy configs
          cp ../unifios/bases/${{ matrix.base }}/buildroot-config.txt .config
          cp ../unifios/bases/${{ matrix.base }}/kernel-config kernel-config
          
          # Configure buildroot
          make olddefconfig
          
      - name: Verify buildroot setup
        run: |
          cd buildroot-2017.11.1
          echo "=== Buildroot Setup Verification ==="
          echo "Working directory: $(pwd)"
          echo "Output directory contents:"
          ls -la output/ || echo "No output directory"
          echo "BR External makefile:"
          ls -la output/.br-external.mk && echo "Content:" && head -5 output/.br-external.mk || echo "File missing"
          echo "Config file:"
          ls -la .config || echo "No .config file"
          echo "Kernel config:"
          ls -la kernel-config || echo "No kernel-config file"
          echo "Testing make dry-run:"
          make -n help >/dev/null && echo "Make system functional" || echo "Make system has issues"
          
      - name: Build wireguard module
        run: |
          mkdir -p modules
          versions="$(cat unifios/bases/${{ matrix.base }}/versions.txt)"
          prefix="$(cat unifios/bases/${{ matrix.base }}/prefix)"
          
          # Validate versions
          if [ -z "$versions" ]; then
            echo "Error: No versions found for ${{ matrix.base }}"
            exit 1
          fi
          
          echo "Building for versions: $versions"
          echo "Using prefix: $prefix"
          
          rm -rf ./buildroot-2017.11.1/linux-patches ./buildroot-2017.11.1/patches
          if [ -d "unifios/bases/${{ matrix.base }}/linux-patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/linux-patches" ./buildroot-2017.11.1/
          fi
          if [ -f "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz" ]; then
            tar -C ./buildroot-2017.11.1 -xf "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz"
          fi
          if [ -d "unifios/bases/${{ matrix.base }}/patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/patches" ./buildroot-2017.11.1/
          fi
          
          cd buildroot-2017.11.1
          
          # Set host compiler flags for DTC compatibility
          export HOSTCFLAGS="-fcommon -Wno-error"
          export HOSTCXXFLAGS="-fcommon -Wno-error"
          
          # Calculate optimal parallel jobs
          NPROC=$(nproc)
          PARALLEL_JOBS=$((NPROC * 3 / 4))
          [ $PARALLEL_JOBS -lt 1 ] && PARALLEL_JOBS=1
          
          (IFS=','
          for ver in $versions; do
            echo "=== Building version $ver ==="
            
            # Verify buildroot state before build
            if [ ! -f "output/.br-external.mk" ]; then
              echo "Error: .br-external.mk missing before build"
              ls -la output/
              exit 1
            fi
            
            # Check if clean target exists before using it
            if make -n wireguard-linux-compat-dirclean >/dev/null 2>&1; then
              echo "Cleaning previous build..."
              make wireguard-linux-compat-dirclean || echo "Clean failed, continuing"
            else
              echo "Clean target not available, skipping"
            fi
            
            echo "Setting kernel version to: $ver"
            sed -i -e '/CONFIG_LOCALVERSION=/s/.*/CONFIG_LOCALVERSION="'$ver'"/' kernel-config
            
            # Build with detailed error reporting and DTC fixes
            echo "Starting build for version $ver..."
            if ! make wireguard-linux-compat-rebuild -j$PARALLEL_JOBS HOSTCFLAGS="$HOSTCFLAGS"; then
              echo "=== BUILD FAILED for version $ver ==="
              echo "Build directory contents:"
              ls -la output/build/ || echo "No build directory"
              echo "Checking for build logs:"
              find output -name "*.log" -exec echo "=== {} ===" \; -exec tail -20 {} \; 2>/dev/null || echo "No logs found"
              echo "Makefile targets available:"
              make help | grep wireguard || echo "No wireguard targets found"
              # Show specific error details
              if [ -f "output/build/build-time.log" ]; then
                echo "=== Build time log ==="
                tail -50 output/build/build-time.log
              fi
              exit 1
            fi
            
            # Copy files with error checking
            if [ ! -f "output/build/wireguard-linux-compat-$MODULE_VERSION/src/wireguard.ko" ]; then
              echo "Error: wireguard.ko not found for version $ver"
              ls -la output/build/wireguard-linux-compat-$MODULE_VERSION/src/ || echo "Source directory not found"
              exit 1
            fi
            
            cp output/build/wireguard-linux-compat-$MODULE_VERSION/src/wireguard.ko ../modules/wireguard-${prefix}${ver}.ko
            
            # Copy netfilter modules if they exist
            if [ -f "output/build/linux-custom/net/ipv4/netfilter/iptable_raw.ko" ]; then
              cp output/build/linux-custom/net/ipv4/netfilter/iptable_raw.ko ../modules/iptable_raw-${prefix}${ver}.ko
            else
              echo "Warning: iptable_raw.ko not found for version $ver"
            fi
            
            if [ -f "output/build/linux-custom/net/ipv6/netfilter/ip6table_raw.ko" ]; then
              cp output/build/linux-custom/net/ipv6/netfilter/ip6table_raw.ko ../modules/ip6table_raw-${prefix}${ver}.ko
            else
              echo "Warning: ip6table_raw.ko not found for version $ver"
            fi
          done)
          
      - name: Verify built modules
        run: |
          echo "Built modules:"
          ls -la modules/
          # Check that we have at least some modules
          if [ -z "$(ls modules/)" ]; then
            echo "Error: No modules were built"
            exit 1
          fi
          
      - name: Enhanced error reporting
        if: failure()
        run: |
          echo "=== UDM MODULE BUILD FAILURE ANALYSIS ==="
          echo "Available disk space:"
          df -h
          echo "Memory usage:"
          free -h
          echo "Buildroot directory:"
          ls -la buildroot-2017.11.1/output/build/ | head -10
          echo "Configuration files:"
          ls -la unifios/bases/${{ matrix.base }}/
          
      - name: Store modules
        uses: actions/upload-artifact@v4
        with:
          name: modules-${{ matrix.base }}
          path: modules

  udm-build-tools:
    needs: [udm-prepare-buildroot]
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    env:
      BASE: udm-1.9.0-10
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            m4 \
            autoconf \
            automake \
            libtool \
            pkg-config \
            kmod \
            lzip \
            ccache \
            bison \
            flex \
            gettext \
            libncurses5-dev \
            rsync \
            unzip \
            bc \
            wget \
            cpio \
            curl \
            ca-certificates \
            patch \
            file \
            python3
            
      - name: Restore buildroot
        uses: actions/download-artifact@v4
        with:
          name: buildroot
          
      - name: Extract buildroot
        run: tar -xf buildroot.tar
        
      - name: Configure buildroot
        run: |
          cd buildroot-2017.11.1
          
          # Ensure output directory structure exists
          mkdir -p output/build output/target output/host output/staging
          
          # Recreate the .br-external.mk file if it doesn't exist
          if [ ! -f "output/.br-external.mk" ]; then
            echo "# This file is automatically generated by buildroot" > output/.br-external.mk
            echo "# DO NOT EDIT" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of directories containing external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external packages" >> output/.br-external.mk
            echo "BR2_EXTERNAL_NAMES :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external makefiles" >> output/.br-external.mk
            echo "BR2_EXTERNAL_MKS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package descriptions" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DESCS :=" >> output/.br-external.mk
            echo "" >> output/.br-external.mk
            echo "# List of external package dependencies" >> output/.br-external.mk
            echo "BR2_EXTERNAL_DEPS :=" >> output/.br-external.mk
          fi
          
          # Copy configs
          cp ../unifios/bases/${{ env.BASE }}/buildroot-config.txt .config
          cp ../unifios/bases/${{ env.BASE }}/kernel-config kernel-config
          
          # Configure buildroot
          make olddefconfig
          
      - name: Build WireGuard tools
        run: |
          cd buildroot-2017.11.1
          # Set host compiler flags for DTC compatibility
          export HOSTCFLAGS="-fcommon -Wno-error"
          export HOSTCXXFLAGS="-fcommon -Wno-error"
          
          # Calculate optimal parallel jobs
          NPROC=$(nproc)
          PARALLEL_JOBS=$((NPROC * 3 / 4))
          [ $PARALLEL_JOBS -lt 1 ] && PARALLEL_JOBS=1
          
          make wireguard-tools-rebuild -j$PARALLEL_JOBS HOSTCFLAGS="$HOSTCFLAGS" # -> output/target/usr/bin/wg
          
      - name: Build bash
        run: |
          cd buildroot-2017.11.1
          export HOSTCFLAGS="-fcommon -Wno-error"
          export HOSTCXXFLAGS="-fcommon -Wno-error"
          NPROC=$(nproc)
          PARALLEL_JOBS=$((NPROC * 3 / 4))
          [ $PARALLEL_JOBS -lt 1 ] && PARALLEL_JOBS=1
          make bash-rebuild -j$PARALLEL_JOBS HOSTCFLAGS="$HOSTCFLAGS" # -> output/target/bin/bash
          
      - name: Build resolvconf
        run: |
          cd buildroot-2017.11.1
          export HOSTCFLAGS="-fcommon -Wno-error"
          export HOSTCXXFLAGS="-fcommon -Wno-error"
          NPROC=$(nproc)
          PARALLEL_JOBS=$((NPROC * 3 / 4))
          [ $PARALLEL_JOBS -lt 1 ] && PARALLEL_JOBS=1
          make openresolv-rebuild -j$PARALLEL_JOBS HOSTCFLAGS="$HOSTCFLAGS" # -> output/target/sbin/resolvconf
          
      - name: Build qrencode
        run: |
          cd buildroot-2017.11.1
          export HOSTCFLAGS="-fcommon -Wno-error"
          export HOSTCXXFLAGS="-fcommon -Wno-error"
          NPROC=$(nproc)
          PARALLEL_JOBS=$((NPROC * 3 / 4))
          [ $PARALLEL_JOBS -lt 1 ] && PARALLEL_JOBS=1
          make libqrencode-rebuild -j$PARALLEL_JOBS HOSTCFLAGS="$HOSTCFLAGS" # -> output/target/usr/bin/qrencode
          
      - name: Collect tools
        run: |
          mkdir -p tools
          cd buildroot-2017.11.1
          
          # Copy tools with error checking
          if [ -f "output/target/usr/bin/wg" ]; then
            cp output/target/usr/bin/wg ../tools/
          else
            echo "Error: wg tool not found"
            exit 1
          fi
          
          if [ -f "output/target/bin/bash" ]; then
            cp output/target/bin/bash ../tools/
          else
            echo "Warning: bash not found, continuing"
          fi
          
          if [ -f "output/target/usr/bin/qrencode" ]; then
            cp output/target/usr/bin/qrencode ../tools/
          else
            echo "Warning: qrencode not found, continuing"
          fi
          
          if [ -f "output/target/sbin/resolvconf" ]; then
            cp output/target/sbin/resolvconf ../tools/
          else
            echo "Warning: resolvconf not found, continuing"
          fi
          
          if [ -f "output/target/etc/resolvconf.conf" ]; then
            cp output/target/etc/resolvconf.conf ../tools/
          else
            echo "Warning: resolvconf.conf not found, continuing"
          fi
          
          # Check for wg-quick in the build directory - try both locations
          if [ -f "output/build/wireguard-tools-$TOOLS_VERSION/src/wg-quick/linux.bash" ]; then
            cp output/build/wireguard-tools-$TOOLS_VERSION/src/wg-quick/linux.bash ../tools/wg-quick
          elif [ -f "output/build/amneziawg-tools-$TOOLS_VERSION/src/wg-quick/linux.bash" ]; then
            cp output/build/amneziawg-tools-$TOOLS_VERSION/src/wg-quick/linux.bash ../tools/wg-quick
          else
            echo "Warning: wg-quick not found, checking available directories..."
            find output/build -name "linux.bash" -type f || echo "No wg-quick script found"
          fi
          
      - name: Store tools
        uses: actions/upload-artifact@v4
        with:
          name: tools
          path: tools

  udm-package:
    needs: [udm-build-tools, udm-build-modules]
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Prepare
        run: mkdir -p package package/wireguard package/wireguard/modules package/wireguard/tools package/wireguard/etc
        
      - name: Restore modules from all builds
        run: |
          mkdir -p temp-modules
          # Download each module artifact individually
          for base in udm-1.9.0-10 udm-1.10.0-8 udm-1.10.0-12 udm-se-2.2.4 udr-2.2.12; do
            echo "Downloading modules for $base"
          done
          
      - name: Download udm-1.9.0-10 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-1.9.0-10
          path: temp-modules/udm-1.9.0-10
        continue-on-error: true
        
      - name: Download udm-1.10.0-8 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-1.10.0-8
          path: temp-modules/udm-1.10.0-8
        continue-on-error: true
        
      - name: Download udm-1.10.0-12 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-1.10.0-12
          path: temp-modules/udm-1.10.0-12
        continue-on-error: true
        
      - name: Download udm-se-2.2.4 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udm-se-2.2.4
          path: temp-modules/udm-se-2.2.4
        continue-on-error: true
        
      - name: Download udr-2.2.12 modules
        uses: actions/download-artifact@v4
        with:
          name: modules-udr-2.2.12
          path: temp-modules/udr-2.2.12
        continue-on-error: true
        
      - name: Consolidate modules
        run: |
          # Move all modules to the package directory
          find temp-modules -name "*.ko" -exec cp {} package/wireguard/modules/ \;
          echo "Consolidated modules:"
          ls -la package/wireguard/modules/
          
      - name: Restore tools
        uses: actions/download-artifact@v4
        with:
          name: tools
          path: package/wireguard/tools
          
      - name: Add setup
        run: cp unifios/setup_wireguard.sh package/wireguard/
        
      - name: Fix permissions
        run: |
          if [ -f "package/wireguard/tools/resolvconf.conf" ]; then
            mv package/wireguard/tools/resolvconf.conf package/wireguard/etc
          fi
          chmod +x package/wireguard/tools/* package/wireguard/setup_wireguard.sh 2>/dev/null || true
          sudo chown -R root:root package/wireguard
          
      - name: Package
        run: tar -C package -czf UnifiOS-$MODULE_VERSION-$TOOLS_VERSION.tar.gz ./
        
      - name: Store package
        uses: actions/upload-artifact@v4
        with:
          name: release_unifios
          path: UnifiOS-${{ env.MODULE_VERSION }}-${{ env.TOOLS_VERSION }}.tar.gz

  release:
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    needs:
      - package
      - udm-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: fossoreslp/release-artifacts@v1
        with:
          title: WireGuard ${{ env.MODULE_VERSION }} ${{ env.TOOLS_VERSION }}
          template: ci/release_body.md
          token: ${{ secrets.GITHUB_TOKEN }}
          variables: ${{ toJSON(env) }}
