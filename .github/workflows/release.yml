name: Release

on:
  push:
    tags:
      - '*'

env:
  MODULE_VERSION: "1.0.20241112"
  TOOLS_VERSION: "1.0.20250706"
  PACKAGE_RELEASE: "1"
  FIRMWARE_ER_v1: "v1.10.11"
  FIRMWARE_ER_v2: "v2.0.9"
  FIRMWARE_UGW: "4.4.50"

jobs:
  create_release:
    if: github.ref != 'refs/tags/v1'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    name: Create Release

    steps:
      - uses: actions/checkout@v4
      
      - name: Get latest successful build
        id: get_build
        run: |
          # Get the latest successful workflow run from master branch
          echo "Getting latest successful build from master branch..."
          
          # Use GitHub API to get the latest successful workflow run
          WORKFLOW_RUN=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/runs?branch=master&status=success&per_page=1" \
            | jq -r '.workflow_runs[0].id')
          
          if [ "$WORKFLOW_RUN" == "null" ] || [ -z "$WORKFLOW_RUN" ]; then
            echo "No successful build found!"
            exit 1
          fi
          
          echo "Found successful build: $WORKFLOW_RUN"
          echo "build_id=$WORKFLOW_RUN" >> $GITHUB_OUTPUT
          
      - name: Create release directory
        run: mkdir -p release-assets
        
      - name: Download all release artifacts
        run: |
          # Download artifacts from the successful build
          BUILD_ID="${{ steps.get_build.outputs.build_id }}"
          echo "Downloading artifacts from build $BUILD_ID"
          
          # List all artifacts from the build
          ARTIFACTS=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$BUILD_ID/artifacts" \
            | jq -r '.artifacts[] | select(.name | startswith("release-")) | .name')
          
          echo "Found artifacts:"
          echo "$ARTIFACTS"
          
          # Download each artifact
          for artifact in $ARTIFACTS; do
            echo "Downloading $artifact..."
            gh run download $BUILD_ID --name "$artifact" --dir release-assets/ || echo "Failed to download $artifact"
          done
          
          # List downloaded files
          echo "Downloaded files:"
          find release-assets -type f | sort
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Validate release assets
        run: |
          echo "=== RELEASE ASSETS VALIDATION ==="
          
          # List all files
          echo "All files in release-assets:"
          find release-assets -type f -name "*.deb" -o -name "*.tar.gz" | sort
          
          # Count files
          DEB_COUNT=$(find release-assets -name "*.deb" | wc -l)
          TAR_COUNT=$(find release-assets -name "*.tar.gz" | wc -l)
          TOTAL_COUNT=$((DEB_COUNT + TAR_COUNT))
          
          echo "Summary:"
          echo "  - .deb files: $DEB_COUNT"
          echo "  - .tar.gz files: $TAR_COUNT" 
          echo "  - Total files: $TOTAL_COUNT"
          
          if [ $TOTAL_COUNT -eq 0 ]; then
            echo "ERROR: No release assets found!"
            exit 1
          fi
          
          # Create comma-separated list for artifacts
          ARTIFACTS_LIST=$(find release-assets -type f | tr '\n' ',' | sed 's/,$//')
          echo "ARTIFACTS_LIST=$ARTIFACTS_LIST" >> $GITHUB_ENV
          
          echo "Artifacts ready for release:"
          echo "$ARTIFACTS_LIST" | tr ',' '\n' | sort
          
      - name: Generate release body
        run: |
          cat > RELEASE_BODY.md << 'EOF'
          ## AmnesiaWG ${{ env.MODULE_VERSION }}
          
          **Changelog**
          - Updated module to ${{ env.MODULE_VERSION }}
          - Updated tools to ${{ env.TOOLS_VERSION }}
          
          ## Versions
          
          | Name | Version |
          |------|---------|
          | Module | ${{ env.MODULE_VERSION }} |
          | Tools | ${{ env.TOOLS_VERSION }} |
          | EdgeOS v1 | ${{ env.FIRMWARE_ER_v1 }} |
          | EdgeOS v2 | ${{ env.FIRMWARE_ER_v2 }} |
          | USG firmware | ${{ env.FIRMWARE_UGW }} |
          
          See below for binaries.
          
          **IMPORTANT:** EdgeOS devices have different packages, one for EdgeOS ${{ env.FIRMWARE_ER_v1 }} (marked v1) and one for EdgeOS ${{ env.FIRMWARE_ER_v2 }} (marked v2). Make sure to download the right one. The installer will produce an error if you use the wrong version.
          
          ## Device names
          
          The naming scheme for source packages is a bit counter intuitive. Here is a list to find out which package is for your device.
          
          **E50:**
          - EdgeRouter X
          - EdgeRouter X SFP
          
          **E100:**
          - EdgeRouter Lite
          - EdgeRouter PoE
          
          **E200:**
          - EdgeRouter 8
          - EdgeRouter Pro
          
          **E300:**
          - EdgeRouter 4
          - EdgeRouter 6P
          - EdgeRouter 12
          
          **E1000:**
          - EdgeRouter Infinity
          
          **UGW3:**
          - UniFi Security Gateway
          
          **UGW4:**
          - UniFi Security Gateway Pro 4
          
          **UGWXG:**
          - UniFi Security Gateway XG 8
          
          **UnifiOS:**
          - UniFi Dream Machine (UDM)
          - UniFi Dream Machine Pro (UDM-Pro)
          - UniFi Dream Machine Special Edition (UDM-SE)
          - UniFi Dream Router (UDR)
          - UniFi Next-Gen Gateway (UXG-Pro)
          EOF
          
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: AmnesiaWG ${{ env.MODULE_VERSION }}
          bodyFile: RELEASE_BODY.md
          artifacts: ${{ env.ARTIFACTS_LIST }}
          draft: false
          prerelease: false
          allowUpdates: true
          makeLatest: true
          generateReleaseNotes: false
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release summary
        run: |
          echo "=== RELEASE CREATED SUCCESSFULLY ==="
          echo "Release tag: ${{ github.ref_name }}"
          echo "Release name: AmnesiaWG ${{ env.MODULE_VERSION }}"
          echo "Assets uploaded: $(echo "${{ env.ARTIFACTS_LIST }}" | tr ',' '\n' | wc -l)"
          echo ""
          echo "ðŸŽ‰ Release is now available at:"
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
